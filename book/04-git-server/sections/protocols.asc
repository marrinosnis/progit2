=== Τα πρωτόκολλα

Το Git μπορεί να χρησιμοποιήσει τέσσερα διαφορετικά πρωτόκολλα για τη μεταφορά δεδομένων: Local, HTTP, Secure Shell (SSH) και Git.
Θα συζητήσουμε τι είναι αυτά τα πρωτόκολλα και σε ποιες βασικές περιστάσεις θέλετε (ή δεν θέλετε) να τα χρησιμοποιήσετε.

==== Το τοπικό πρωτόκολλο

(((πρωτόκολλα, τοπικό)))
Το πιο βασικό είναι το _τοπικό πρωτόκολλο_, στο οποίο το απομακρυσμένο αποθετήριο βρίσκεται σε άλλο κατάλογο στον δίσκο.
Αυτό χρησιμοποιείται συχνά εάν όλοι στην ομάδα σας έχουν πρόσβαση σε ένα κοινό σύστημα αρχείων (filesystem), όπως https://en.wikipedia.org/wiki/Network_File_System[NFS^] mount ή στη σχετικά σπάνια περίπτωση που όλοι οι χρήστες συνδέονται στον ίδιο υπολογιστή.
Η τελευταία περίπτωση είναι λιγότερο από ιδανική, διότι όλα τα στιγμιότυπα κώδικα του αποθετηρίου κατοικούν στον ίδιο υπολογιστή, καθιστώντας πολύ πιο πιθανή μια καταστροφική απώλεια.

Εάν διαθέτετε ένα κοινόχρηστο σύστημα αρχείων, μπορείτε να κλωνοποιήσετε, να ωθήσετε σε και να ελκύσετε από ένα αποθετήριο που βασίζεται σε τοπικά αρχεία.
Για να κλωνοποιήσετε ένα αποθετήριο όπως αυτό ή για να το προσθέσετε ως απομακρυσμένο σε ένα υπάρχον έργο, χρησιμοποιείτε τη διαδρομή (path) του αποθετηρίου ως διεύθυνση URL.
Για παράδειγμα, για να κλωνοποιήσετε ένα τοπικό αποθετήριο, μπορείτε να εκτελέσετε κάτι σαν:

[source,console]
----
$ git clone /srv/git/project.git
----

Ή κάτι σαν:

[source,console]
----
$ git clone file:///srv/git/project.git
----

Το Git λειτουργεί ελαφρώς διαφορετικά αν καθορίσετε ρητά το `file://` στην αρχή της διεύθυνσης URL.
Αν καθορίσετε μόνο τη διαδρομή, το Git προσπαθεί να χρησιμοποιήσει hardlinks ή να αντιγράψει απευθείας τα αρχεία που χρειάζονται.
Εάν προσθέσετε το `file://`, το Git ενεργοποιεί τις διαδικασίες που συνήθως χρησιμοποιεί για τη μεταφορά δεδομένων μέσω δικτύου, μία μέθοδο μεταφοράς των δεδομένων γενικά πολύ λιγότερο αποτελεσματική.
Ο βασικός λόγος που θα θέλαμε να χρησιμοποιήσετε το `file://` είναι η περίπτωση κατά την οποία θέλετε ένα καθαρό αντίγραφο του αποθετηρίου με εξωτερικές αναφορές ή αντικείμενα που απομένουν -- συνήθως μετά από εισαγωγή από ένα άλλο σύστημα ελέγχου εκδόσεων ή κάτι παρόμοιο (βλ. <<ch10-git-internals#ch10-git-internals>> για σχετικές εργασίες συντήρησης).
Στο παρακάτω παράδειγμα θα χρησιμοποιήσουμε τη διαδρομή χωρίς το `file://` επειδή αυτό είναι σχεδόν πάντα γρηγορότερο.

Για να προσθέσετε ένα τοπικό αποθετήριο σε ένα υπάρχον έργο Git, μπορείτε να εκτελέσετε κάτι σαν:

[source,console]
----
$ git remote add local_proj /srv/git/project.git
----

Στη συνέχεια, μπορείτε να ωθήσετε και να ελκύσετε από αυτό το απομακρυσμένο αποθετήριο σαν να το κάνατε μέσα από ένα δίκτυο.

===== Τα υπέρ

Τα πλεονεκτήματα των αποθετηρίων που βασίζονται σε αρχεία είναι ότι είναι απλά και χρησιμοποιούν τα υπάρχοντα δικαιώματα σε αρχεία και πρόσβαση στο δίκτυο.
Εάν έχετε ήδη ένα κοινό σύστημα αρχείων στο οποίο έχει πρόσβαση ολόκληρη η ομάδα σας, η εγκατάσταση ενός αποθετηρίου είναι πολύ εύκολη.
Μπορείτε να κολλήσετε ένα γυμνό (χωρίς αρχεία) αντίγραφο του αποθετηρίου κάπου όπου ο καθένας έχει πρόσβαση και να ορίσετε τα δικαιώματα ανάγνωσης/εγγραφής όπως θα κάνατε για οποιονδήποτε άλλο κοινόχρηστο κατάλογο.
Θα συζητήσουμε πώς μπορείτε να κάνετε export ένα αντίγραφο γυμνού αποθετηρίου για αυτόν τον σκοπό αυτό στο <<ch04-git-on-the-server#r_getting_git_on_a_server>>.

Αυτή είναι επίσης μια καλή επιλογή για γρήγορη λήψη της εργασίας από το αποθετήριο εργασίας κάποιου άλλου.
Εάν εσείς και μία συνεργάτιδά σας εργάζεστε στο ίδιο έργο και η συνεργάτιδά σας θέλει να ελέγξετε τη δουλειά της, η εκτέλεση μιας εντολής όπως `git pull /home/john/project` είναι συχνά ευκολότερη από ό,τι η συνεργάτιδά σας να ωθήσει σε έναν απομακρυσμένο διακομιστή και εσείς να ανακτήσετε από αυτόν.

===== Τα κατά

Τα μειονεκτήματα αυτής της μεθόδου είναι ότι η κοινή πρόσβαση είναι γενικά πιο δύσκολη στη ρύθμιση και πρόσβαση από πολλαπλές τοποθεσίες από ότι η βασική πρόσβαση στο δίκτυο.
Αν θέλετε να ωθήσετε από τον φορητό σας υπολογιστή όταν είστε στο σπίτι, θα πρέπει να κάνετε mount τον απομακρυσμένο δίσκο, κάτι που ενδεχομένως είναι δύσκολο και αργό σε σύγκριση με την πρόσβαση που βασίζεται στο δίκτυο.

Είναι σημαντικό να αναφερθεί ότι αυτή δεν είναι απαραίτητα η γρηγορότερη επιλογή, εφόσον χρησιμοποιείτε κάποιου είδους κοινό mount.
Ένα τοπικό αποθετήριο είναι γρήγορο μόνον εφόσον έχετε γρήγορη πρόσβαση στα δεδομένα.
Ένα αποθετήριο σε NFS είναι συχνά πιο αργό από ένα αποθετήριο με πρόσβαση SSH στον ίδιο διακομιστή, κάτι που επιτρέπει στο Git να τρέχει σε τοπικούς σε κάθε σύστημα.

Τέλος, το πρωτόκολλο αυτό δεν προστατεύει το αποθετήριο από τυχαίες αστοχίες.
Όλοι οι χρήστες έχουν πλήρη πρόσβαση στο κέλυφος στο "`απομακρυσμένο`" αποθετήριο και τίποτα δεν τους εμποδίζει να αλλάξουν ή να αφαιρέσουν εσωτερικά αρχεία του Git και να καταστρέψουν το αποθετήριο.

==== Πρωτόκολλα HTTP

Το Git μπορεί να επικοινωνήσει μέσω HTTP με δύο διαφορετικούς τρόπους.
Πριν από το Git 1.6.6 υπήρχε μόνον ένας τρόπος, που ήταν πολύ απλοϊκός και γενικά μόνο-για-ανάγνωση.
Στην έκδοση 1.6.6 εισήχθη ένα νέο, πιο έξυπνο πρωτόκολλο το οποίο περιλάμβανει τη δυνατότητα του Git να διαπραγματεύεται έξυπνα τη μεταφορά δεδομένων με τρόπο παρόμοιο όπως μέσω SSH.
Τα τελευταία χρόνια αυτό το νέο πρωτόκολλο HTTP έχει γίνει πολύ δημοφιλές, διότι είναι απλούστερο για τους χρήστες και πιο έξυπνο όσον αφορά στον τρόπο επικοινωνίας.
Η νεότερη έκδοση αναφέρεται συχνά ως "`έξυπνο`" HTTP και ο παλαιότερος τρόπος ως "`χαζό`" HTTP.
Θα καλύψουμε πρώτα το πιο πρόσφατο "`έξυπνο`" HTTP.

===== Έξυπνο HTTP

(((πρωτόκολλα, έξυπνο HTTP)))
Το "`έξυπνο`" HTTP έχει παρόμοια λειτουργία με τα πρωτόκολλα SSH ή Git, αλλά τρέχει στις θύρες που χρησιμοποιουνται τυπικά για HTTPS και μπορεί να χρησιμοποιήσει διάφορους μηχανισμούς ταυτοποίησης HTTP, κάτι που σημαίνει ότι είναι συχνά πιο εύχρηστο για τους χρήστες από ό,τι είναι για παράδειγμα το SSH, δεδομένου ότι επιτρέπει την ταυτοποίηση με όνομα χρήστη/κωδικό πρόσβασης, αντί για κλειδιά SSH.

Φαίνεται ότι πλέον είναι ο πιο δημοφιλής τρόπος χρήσης του Git, αφού μπορεί να ρυθμιστεί τόσο για να ανώνυμη ανάκτηση όπως κάνει το πρωτόκολλο `git://` όσο και για ώθηση με ταυτοποίηση και κρυπτογράφηση όπως το πρωτόκολλο SSH.
Αντί να πρέπει να ορίσετε διαφορετικές διευθύνσεις URL για αυτά τα δύο πράγματα, μπορείτε πλέον να χρησιμοποιήσετε μια ενιαία διεύθυνση URL και για τα δύο.
Αν προσπαθήσετε να ωθήσετε και το αποθετήριο απαιτεί ταυτοποίηση (όπως κανομικά πρέπει να κάνει), ο διακομιστής μπορεί να ζητήσει όνομα χρήστη και κωδικό πρόσβασης.
Το ίδιο ισχύει και για την πρόσβαση ανάγνωσης.

Μάλιστα, για υπηρεσίες όπως το GitHub, η διεύθυνση URL που χρησιμοποιείτε για την προβολή του αποθετηρίου online (για παράδειγμα, "`https://github.com/schacon/simplegit[^]`") είναι η ίδια διεύθυνση URL που μπορείτε να χρησιμοποιήσετε για να κλωνοποιήσετε και, εφόσον έχετε πρόσβαση, να ωθήσετε.

===== Χαζό HTTP

(((πρωτόκολλα, χαζό HTTP)))
Εάν ο διακομιστής δεν ανταποκρίνεται σε μια υπηρεσία έξυπνου HTTP του Git, ο πελάτης θα προσπαθήσει να χρησιμοποιήσει το απλούστερο πρωτόκολλο "`χαζό`" HTTP.
Το χαζό πρωτόκολλο αναμένει ότι το γυμνό αποθετήριο Git να εξυπηρετείται σαν να επρόκειτο για κανονικά αρχεία από τον web server.
Η ομορφιά του χαζού HTTP είναι η απλότητα στην εγκατάστασή του.
Βασικά, το μόνο που έχετε να κάνετε είναι να τοποθετήσετε ένα γυμνό αποθετήριο Git κάτω από τον ριζικό κατάλογο του εγγράφου HTTP και να δημιουργήσετε ένα συγκεκριμένο άγκιστρο `post-update`, και τελειώσατε (βλ. <<ch08-customizing-git#r_git_hooks>>).
Σε αυτό το σημείο, οποιοσδήποτε έχει πρόσβαση στον web server κάτω από τον οποίο έχετε κρεμάσει το αποθετήριο, μπορεί επίσης να κλωνοποιήσει το αποθετήριο.
Για να επιτρέψετε πρόσβαση ανάγνωσης στο αποθετήριό σας μέσω HTTP, κάνετε κάτι σαν αυτό:

[source,console]
----
$ cd /var/www/htdocs/
$ git clone --bare /path/to/git_project gitproject.git
$ cd gitproject.git
$ mv hooks/post-update.sample hooks/post-update
$ chmod a+x hooks/post-update
----

Αυτό είναι όλο. (((άγκιστρα, post-update)))
Το άγκιστρο `post-update` (που έρχεται με το Git) τρέχει την κατάλληλη εντολή (`git update-server-info`) για να κάνει την ανάκτηση και κλωνοποίηση μέσω HTTP να λειτουργούν σωστά.
Αυτή η εντολή εκτελείται όταν ωθείτε σε αυτό το αποθετήριο (ίσως μέσω SSH)· τότε, κάποιος μπορεί να κλωνοποιήσει με κάτι σαν:

[source,console]
----
$ git clone https://example.com/gitproject.git
----

Στη συγκεκριμένη περίπτωση, χρησιμοποιείτε τη διαδρομή `/var/www/htdocs` που είναι κοινή για διακομιστές Apache, αλλά μπορείτε να χρησιμοποιήσετε οποιονδήποτε στατικό web server -- απλά τοποθετείτε το γυμνό αποθετήριο στη διαδρομή του.
Τα δεδομένα Git διακομίζονται ως απλά στατικά αρχεία (βλ. ενότητα <<ch10-git-internals#ch10-git-internals>> για λεπτομέρειες σχετικά με τον τρόπο με τον οποίο διακομίζονται).

Σε γενικές γραμμές, επιλέγετε είτε να τρέξετε έναν διακομιστή με έξυπνο HTTP για ανάγνωση/εγγραφή είτε απλά να έχετε πρόσβαση στα αρχεία για ανάγνωση μόνο με τον χαζό τρόπο.
Σπάνια συνδυάζονται αυτές οι δύο υπηρεσίες.

===== Τα υπέρ

Θα επικεντρωθούμε στα πλεονεκτήματα της έξυπνης έκδοσης του πρωτοκόλλου HTTP.

Η ευκολία να χρειάζεται μόνον μία ενιαία διεύθυνση URL για όλους τους τύπους πρόσβασης και η προτροπή για ταυτοποίηση από τον διακομιστή μόνο όταν απαιτείται έλεγχος ταυτότητας κάνουν τα πράγματα πολύ απλά για τον τελικό χρήστη.
Η ταυτοποίηση με όνομα χρήστη και κωδικό πρόσβασης είναι επίσης ένα μεγάλο πλεονέκτημα έναντι του SSH, δεδομένου ότι οι χρήστες δεν χρειάζεται να παράγουν τοπικά κλειδιά SSH και να φορτώνουν το δημόσιο κλειδί τους στον εξυπηρετητή πριν μπορέσουν να επικοινωνήσουν με αυτόν.
Για λιγότερο προηγμένους χρήστες ή χρήστες σε συστήματα όπου το SSH δεν είναι σύνηθες, αυτό αποτελεί σημαντικό πλεονέκτημα στη χρηστικότητα.
Είναι επίσης ένα πολύ γρήγορο και αποτελεσματικό πρωτόκολλο, παρόμοιο με το SSH.

Μπορείτε επίσης να διαθέτετε τα αποθετήριά σας μόνο για ανάγνωση μέσω HTTPS, πράγμα που σημαίνει ότι μπορείτε να κρυπτογραφήσετε τη μεταφορά του περιεχομένου· ή μπορείτε να ακόμα να κάνετε τους πελάτες να χρησιμοποιούν ειδικά υπογεγραμμένα πιστοποιητικά SSL.

Ένα άλλο υπέρ είναι ότι το HTTPS είναι τόσο διαδεδομένο πρωτόκολλο που συχνά τα εταιρικά firewall ρυθμίζονται με τέτοιον τρόπο ώστε να επιτρέπουν την κίνηση δεδομένων μέσω αυτών των θυρών.

===== Τα κατά

Το Git μέσω HTTPS εγκαθίσταται λίγο πιο δύσκολα σε σύγκριση με το SSH σε ορισμένους διακομιστές.
Εκτός από αυτό, τα άλλα πρωτόκολλα δεν έχουν κανένα σημαντικό πλεονέκτημα σε σύγκριση με το πρωτόκολλο "`έξυπνο`" HTTP όσον αφορά στο Git.

Αν χρησιμοποιείτε HTTP για ταυτοποίηση ώθησης, η παροχή των διαπιστευτηρίων είναι κάποιες φορές πιο πολύπλοκη από τη χρήση κλειδιών SSH.
Ωστόσο, υπάρχουν αρκετά εργαλεία προσωρινής αποθήκευσης διαπιστευτηρίων που μπορείτε να χρησιμοποιήσετε, συμπεριλαμβανομένων των Keychain στο OS X και Credential Manager στα Windows, που καθιστούν τη διαδικασία ταυτοποίησης αρκετά ανώδυνη.
Στην ενότητα <<ch07-git-tools#r_credential_caching>> μπορείτε να δείτε πώς μπορείτε να ρυθμίσετε ασφαλή προσωρινή αποθήκευση κωδικού πρόσβασης HTTP στο σύστημά σας.

==== Το πρωτόκολλο SSH

(((πρωτόκολλα, SSH)))
Ένα κοινό πρωτόκολλο μεταφοράς για το Git όταν αυτο-φιλοξενείται είναι το SSH.
Αυτό οφείλεται στο ότι η πρόσβαση σε διακομιστές μέσω SSH είναι ήδη ρυθμισμένη -- και αν δεν είναι, είναι εύκολο να γίνει.
Το SSH είναι επίσης πρωτόκολλο ταυτοποιημένου δικτύου και επειδή είναι πανταχού παρόν είναι γενικά εύκολο να εγκαταστασθεί και να χρησιμοποιηθεί.

Για να κλωνοποιήσετε ένα αποθετήριο Git πάνω από SSH, μπορείτε να ορίσετε το URL `ssh://` ως εξής:

[source,console]
----
$ git clone ssh://[user@]server/project.git
----

Ή μπορείτε να χρησιμοποιήσετε τη συντομότερη σύνταξη τύπου scp για το πρωτόκολλο SSH:

[source,console]
----
$ git clone [user@]server:project.git
----

Και στις δύο περιπτώσεις, αν δεν ορίσετε το όνομα χρήστη, το Git χρησιμοποιεί το όνομα χρήστη που έχετε στο σύστημά σας.

===== Τα υπέρ

Τo SSH έχει πολλά πλεονεκτήματα
Κατ' αρχάς το SSH είναι σχετικά εύκολο να εγκατασταθεί -- οι δαίμονες SSH είναι πολύ συνηθισμένοι, πολλοί διαχειριστές δικτύου έχουν εμπειρία με αυτούς και πολλά λειτουργικά συστήματα είναι εγκατεστημένα με αυτούς ή έχουν εργαλεία να τους διαχειρίζονται.
Ακόμα, η πρόσβαση μέσω SSH είναι ασφαλής -- όλη η μεταφορά δεδομένων είναι κρυπτογραφημένη και απαιτεί ταυτοποίηση.
Τέλος, όπως και το HTTPS, το Git και το πρωτόκολο local, το SSH είναι αποδοτικό με την έννοια ότι συμπιέζει τα δεδομένα όσο είναι δυνατό πριν τη μεταφορά.

===== Τα κατά

Το μειονέκτημα του SSH είναι ότι δεν υποστηρίζει ανώνυμη πρόσβαση στο αποθετήριό σας.
Οι χρήστες _πρέπει_ να έχουν πρόσβαση μέσω SSH στον υπολογιστή σας ακόμα και αν είναι μόνο-για-ανάγνωση, κάτι που δεν καθιστά την πρόσβαση μέσα από SSH ενδεδειγμένη για έργα ανοικτού κώδικα, στα οποία οι χρήστες μπορεί να θέλουν μόνο να κλωνοποιήσουν το αποθετήριό σας για να το εξετάσουν.
Αν το χρησιμοποιείτε μόνο εντός του εταιρικού δικτύου σας, το SSH ίσως είναι το μοναδικό πρωτόκολλο που θα χρειαστείτε.
Αν θέλετε να επιτρέψετε ανώνυμη πρόσβαση για ανάγνωση μόνο στα έργα σας και επίσης θέλετε να χρησιμοποιείτε το SSH, θα πρέπει να εγκαταστήσετε το SSH για εσάς ώστε να ωθείτε μέσα από το SSH, αλλά κάποιο άλλο πρωτόκολλο για να ανακτήσουν όλοι οι υπόλοιποι.

==== Το πρωτόκολλο Git

(((protocols, git)))
Τέλος, έχουμε το πρωτόκολλο Git.
Το πρωτόκολλο Git είναι ένας ειδικός δαίμονας που έρχεται μαζί με το Git· ακούει στη θύρα 9418 που παρέχει μία υπηρεσία παρόμοια με το πρωτόκολλο SSH αλλά με απολύτως καμία ταυτοποίηση ή κρυπτογράφηση.
Για να διαθέσετε ένα αποθετήριο πάνω από το πρωτόκολλο Git, πρέπει να δημιουργήσετε το αρχείο `git-daemon-export-ok` -- ο δαίμονας δεν θα σερβίρει το αποθετήριο αν δεν έχει αυτό το αρχείο -- αλλά πέρα από αυτό δεν υπάρχει καμία ασφάλεια.
Είτε το αποθετήριο Git είναι διαθέσιμο σε όλους να το κλωνοποιήσουν είτε σε κανέναν.
Αυτό σημαίνει ότι γενικά δεν γίνεται ώθηση πάνω από αυτό το πρωτόκολλο.
Μπορείτε να ενεργοποιήσετε την πρόσβαση ώθησης, αλλά δεδομένης της έλλειψης ταυτοποίησης αν ενεργοποιήσετε την πρόσβαση ώθησης, οποιοσδήποτε βρίσκει το URL του έργου σας στο Internet, θα μπορεί να ωθήσει σε αυτό. 
Είναι προφανές ότι αυτή η συμπεριφορά είναι σπάνια επιθυμητή.

===== Τα υπέρ

Το πρωτόκολλο Git είναι συχνά το πιο γρήγορο διαθέσιμο πρωτόκολλο μεταφοράς μέσα από δίκτυο.
Αν πρέπει να εξυπηρετείτε κυκλοφορία πολλών δεδομένων για ένα δημόσιο έργο ή ένα πολύ μεγάλο έργο που δεν απαιτεί ταυτοποίηση χρηστών για πρόσβαση ανάγνωσης, μάλλον θα θέλετε έναν δαίμονα Git για να εξυπηρετήσετε το έργο σας.
Χρησιμοποιεί τον ίδιο μηχανισμό μεταφοράς δεδομένων με το πρωτόκολλο SSH αλλά χωρίς την επιβάρυνση της κρυπτογράφησης και ταυτοποίησης.

===== Τα κατά

Λόγω της έλλειψης TLS ή άλλης κρυπτογράφησης, η κλωνοποίηση μέσω `git://` μπορεί να οδηγήσει σε αυθαίρετο κενό ασφάλειας εκτέλεσης κώδικα και συνεπώς πρέπει να αποφεύγεται εκτός κι αν γνωρίζετε πολύ καλά τι κάνετε.

* Αν εκτελέσετε `git clone git://example.com/project.git`, κάποιος κακόβουλος που ελέγχει, π.χ. τον router σας μπορεί να τροποποιήσει το αποθετήριο που μόλις κλωνοποιήσατε, εισάγοντας κακόβουλο κώδικα σε αυτό.
  Αν μετά μεταγλωττίσετε/εκτελέσετε τον κώδικα που μόλις κλωνοποιήσατε, θα εκτελέσετε τον κακόβουλο κώδικα.
  Η εκτέλεση της εντολής `git clone http://example.com/project.git` πρέπει να αποφεύγεται για τον ίδιο λόγο.
* Η εκτέλεση της εντολής `git clone https://example.com/project.git` δεν παρουσιάζει το ίδιο πρόβλημα (εκτός κι αν ο κακόβουλος χρήστης παράσχει πιστοποιητικό TLS για το example.com).
  Η εκτέλεση της εντολής `git clone git@example.com:project.git` παρουσιάζει αυτό το πρόβλημα αν αποδεχτείτε ένα λανθασμένο αποτύπωμα κλειδιού SSH.
  
Επίσης δεν έχει ταυτοποίηση, δηλαδή ο καθένας μπορεί να κλωνοποιήσει το αποθετήριο (αν και συχνά αυτό ακριβώς θέλετε).
Επίσης είναι πιθανότατα το πιο δύσκολο πρωτόκολλο από πλευράς ρύθμισης.
Πρέπει να τρέχει το δικό του δαίμονα, που απαιτεί ρύθμιση `xinetd` ή `systemd` ή κάτι παρόμοιο, το οποίο δεν είναι πάντα εύκολο.
Απαιτεί επίσης πρόσβαση στη θύρα 9418 του firewall, που δεν είναι κάποια από τις τυποποιημένες θύρες που επιτρέπουν τα firewall των εταιρικών δικτύων.
Πίσω από τα firewall μεγάλων εταιριών, αυτή η ασυνήθιστη θύρα είναι συνήθως μπλοκαρισμένη.

