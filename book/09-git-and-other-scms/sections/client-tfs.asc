==== Git and TFS

(((διαλειτουργικότητα με άλλα VCS, TFS)))
(((TFS)))((("TFVC", see="TFS")))
Το Git γίνεται δημοφιλές στους προγραμματιστές Windows και εάν γράφουμε κώδικα σε Windows, υπάρχει μεγάλη πιθανότητα να χρησιμοποιούμε το Team Foundation Server (TFS) της Microsoft.
Το TFS είναι μια σουίτα συνεργασίας που περιλαμβάνει την παρακολούθηση ελαττωμάτων και αντικειμένων εργασίας, υποστήριξη διαδικασιών Scrum και άλλων, αναθεώρηση κώδικα και έλεγχο εκδόσεων.
Υπάρχει μια μικρή σύγχυση: *TFS* είναι ο διακομιστής, ο οποίος υποστηρίζει τον έλεγχο του πηγαίου κώδικα χρησιμοποιώντας τόσο το Git όσο και το δικό του προσαρμοσμένο VCS, το οποίο έχουν ονομάσει *TFVC* (Team Foundation Version Control).
Η υποστήριξη για Git είναι μια κάπως νέα δυνατότητα για το TFS (από την έκδοση 2013), έτσι όλα τα εργαλεία που προηγούνται αυτής της έκδοσης αναφέρονται στο κομμάτι του ελέγχου εκδόσεων ως ``TFS'', αν και εργάζονται κυρίως με το TFVC.

Αν βρεθούμε σε μια ομάδα που χρησιμοποιεί το TFVC αλλά θα προτιμούσαμε να χρησιμοποιούμε το Git ως τον πελάτη ελέγχου εκδόσεων, υπάρχει ένα έργο για εμάς.

===== Ποιο εργαλείο;

(((git-tf)))(((git-tfs)))

Στην πραγματικότητα, υπάρχουν δύο: τα git-tf και git-tfs.

Το `git-tfs` (που βρίσκεται στη https://github.com/git-tfs/git-tfs[]) είναι ένα έργο .NET και (τουλάχιστον τώρα που γράφεται αυτό το κείμενο) τρέχει μόνο σε Windows.
Για να συνεργαστεί με αποθετήρια Git, χρησιμοποιεί συνδέσεις της .NET για libgit2, μια εφαρμογή του Git που προσανατολίζεται στη βιβλιοθήκη, η οποία είναι εξαιρετικά αποδοτική και επιτρέπει μεγάλη ευελιξία με τις εσωτερικές λειτουργίες ενός αποθετηρίου Git.
Το Libgit2 δεν είναι μια ολοκληρωμένη εφαρμογή του Git, οπότε για να καλύψει τη διαφορά, το git-tfs καλεί τη γραμμής εντολών του πελάτη Git για κάποιες λειτουργίες κι έτσι δεν υπάρχουν τεχνητά όρια στο τι μπορεί να κάνει με τα αποθετήρια Git.
Η υποστήριξη των χαρακτηριστικών του TFVC είναι πολύ ώριμη, αφού χρησιμοποιεί τα συγκροτήσεις Visual Studio για εργασίες με διακομιστές.
Αυτό σημαίνει ότι θα χρειαστούμε πρόσβαση σε αυτές τις συγκροτήσεις, πράγμα που σημαίνει ότι πρέπει να εγκαταστήσουμε μια πρόσφατη έκδοση του Visual Studio (οποιαδήποτε έκδοση από την έκδοση 2010 και μετά, συμπεριλαμβανομένης της Express από την έκδοση 2012) ή το Visual Studio SDK.

Το `git-tf` (του οποίου το σπίτι βρίσκεται στη https://gittf.codeplex.com[]) είναι ένα έργο Java και ως εκ τούτου τρέχει σε οποιονδήποτε υπολογιστή με περιβάλλον εκτέλεσης Java (Java runtime environment).
Συνδέεται με τα αποθετήρια Git μέσω του JGit (εφαρμογή JVM του Git), πράγμα που σημαίνει ότι δεν έχει ουσιαστικά κανένα περιορισμό όσον αφορά τις λειτουργίες του Git.
Ωστόσο, η υποστήριξή του για το TFVC είναι περιορισμένη σε σύγκριση με το git-tfs —για παράδειγμα, δεν υποστηρίζει κλάδους.

Έτσι κάθε εργαλείο έχει πλεονεκτήματα και μειονεκτήματα και υπάρχουν πολλές καταστάσεις που ευνοούν το ένα σε σχέση με το άλλο.
Σε αυτό το βιβλίο Θα καλύψουμε τη βασική χρήση και των δύο.

[NOTE]
====
Θα χρειαστούμε πρόσβαση σε ένα αποθετήριο TFVC για να παρακολουθήσουμε αυτά τα παραδείγματα.
Αυτά δεν είναι τόσο άφθονα εκεί έξω όσο τα αποθετήρια Git ή Subversion, οπότε μπορεί να χρειαστεί να δημιουργήσουμε ένα δικό μας.
Το Codeplex (https://www.codeplex.com[]) ή το Visual Studio Online (http://www.visualstudio.com[]) είναι και οι δύο καλές επιλογές για κάτι τέτοιο.
====


===== Ξεκινώντας με το `git-tf`

Το πρώτο πράγμα που κάνουμε, όπως συμβαίνει με οποιοδήποτε πρόγραμμα Git, είναι ο κλώνος.
Με το `git-tf` αυτό μοιάζει ως εξής:

[source,console]
----
$ git tf clone https://tfs.codeplex.com:443/tfs/TFS13 $/myproject/Main project_git
----

Το πρώτο όρισμα είναι η διεύθυνση URL μιας συλλογής TFVC, η δεύτερη είναι της μορφής `$/έργο/κλάδος` και η τρίτη είναι η διαδρομή προς τον τοπικό αποθετήριο Git που πρόκειται να δημιουργηθεί (το τελευταίο είναι προαιρετικό).
Το `git-tf` μπορεί να λειτουργήσει μόνο με έναν κλάδο κάθε φορά· εάν θέλουμε να κάνουμε `checkin` σε διαφορετικό κλάδο TFVC, θα πρέπει να κάνουμε έναν νέο κλώνο από αυτόν τον κλάδο.

Αυτό δημιουργεί ένα πλήρως λειτουργικό αποθετήριο Git:

[source,console]
----
$ cd project_git
$ git log --all --oneline --decorate
512e75a (HEAD, tag: TFS_C35190, origin_tfs/tfs, master) Checkin message
----

Αυτό ονομάζεται _ρηχός_ κλώνος, πράγμα που σημαίνει ότι έχει ληφθεί μόνο το τελευταίο σύνολο αλλαγών.
Το TFVC δεν έχει σχεδιαστεί έτσι ώστε κάθε πελάτης να έχει ένα πλήρες αντίγραφο του ιστορικού, οπότε το git-tf έχει ως προεπιλογή να παίρνει μόνο την πιο πρόσφατη έκδοση, που είναι και το πιο γρήγορο.

Αν έχουμε κάποιο χρόνο, αξίζει τον κόπο να κλωνοποιήσουμε ολόκληρο το ιστορικό του έργου, χρησιμοποιώντας την επιλογή `--deep`:

[source,console]
----
$ git tf clone https://tfs.codeplex.com:443/tfs/TFS13 $/myproject/Main \
  project_git --deep
Username: domain\user
Password:
Connecting to TFS...
Cloning $/myproject into /tmp/project_git: 100%, done.
Cloned 4 changesets. Cloned last changeset 35190 as d44b17a
$ cd project_git
$ git log --all --oneline --decorate
d44b17a (HEAD, tag: TFS_C35190, origin_tfs/tfs, master) Goodbye
126aa7b (tag: TFS_C35189)
8f77431 (tag: TFS_C35178) FIRST
0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
        Team Project Creation Wizard
----

Παρατηρούμε ετικέτες με ονόματα όπως `TFS_C35189`· αυτό είναι ένα χαρακτηριστικό που μας βοηθάει να ξέρουμε ποιες υποβολές του Git σχετίζονται με το σύνολο αλλαγών του TFVC.
Αυτός είναι ένας καλός τρόπος αναπαράστασης, αφού μπορούμε να δούμε με μια απλή εντολή `log` ποια από τις υποβολές μας σχετίζεται με ένα στιγμιότυπο που υπάρχει επίσης στο TFVC.
Δεν είναι απαραίτητες (στην πραγματικότητα μπορούμε να τις απενεργοποιήσουμε με την `git config git-tf.tag false`) —η `git-tf` διατηρεί τις πραγματικές αντιστοιχίσεις υποβολών-συνόλων αλλαγών στο αρχείο `.git/git-tf`.


===== Ξεκινώντας με το `git-tfs`

Η κλωνοποίηση του `git-tfs` συμπεριφέρεται λίγο διαφορετικά:

[source,powershell]
----
PS> git tfs clone --with-branches \
    https://username.visualstudio.com/DefaultCollection \
    $/project/Trunk project_git
Initialized empty Git repository in C:/Users/ben/project_git/.git/
C15 = b75da1aba1ffb359d00e85c52acb261e4586b0c9
C16 = c403405f4989d73a2c3c119e79021cb2104ce44a
Tfs branches found:
- $/tfvc-test/featureA
The name of the local branch will be : featureA
C17 = d202b53f67bde32171d5078968c644e562f1c439
C18 = 44cd729d8df868a8be20438fdeeefb961958b674
----

Παρατηρούμε τη σημαία `--with-branches`.
Το `git-tfs` είναι ικανό να απεικονίσει κλάδους TFVC σε κλάδους Git και αυτή η σημαία του λέει να δημιουργήσει έναν τοπικό κλάδο Git για κάθε κλάδο TFVC.
Αυτό συνιστάται ιδιαίτερα αν έχουμε διακλαδιστεί ή συγχωνευτεί στο TFS, αλλά δεν θα λειτουργήσει με διακομιστές παλαιότερους από τον TFS 2010 —πριν από αυτήν την έκδοση, οι ``κλάδοι'' ήταν απλά κατάλογοι, οπότε το `git-tfs` δεν μπορεί να τους ξεχωρίσει από τους κανονικούς καταλόγους.

Ας ρίξουμε μια ματιά στο αποθετήριο Git που προκύπτει:

[source,powershell]
----
PS> git log --oneline --graph --decorate --all
* 44cd729 (tfs/featureA, featureA) Goodbye
* d202b53 Branched from $/tfvc-test/Trunk
* c403405 (HEAD, tfs/default, master) Hello
* b75da1a New project
PS> git log -1
commit c403405f4989d73a2c3c119e79021cb2104ce44a
Author: Ben Straub <ben@straub.cc>
Date:   Fri Aug 1 03:41:59 2014 +0000

    Hello

    git-tfs-id: [https://username.visualstudio.com/DefaultCollection]$/myproject/Trunk;C16
----

Υπάρχουν δύο τοπικοί κλάδοι, `master` και `featureA`, που αναπαριστούν το αρχικό σημείο εκκίνησης του κλώνου (`Trunk` στο TFVC) και έναν κλάδο-απόγονο (`featureA` στο TFVC).
Μπορούμε επίσης να δούμε ότι το ``απομακρυσμένο αποθετήριο'' του `tfs` έχει επίσης μερικά refs: `default` και `featureA`, που αναπαριστούν κλάδους του TFVC.
Το `git-tfs` απεικονίζει τον κλάδο που έχουμε κλωνοποιήσει από το `tfs/default`, και οι άλλοι παίρνουν τα δικά τους ονόματα.

Ένα άλλο πράγμα που πρέπει να παρατηρήσουμε είναι οι γραμμές `git-tfs-id:` στα μηνύματα υποβολών.
Αντί των ετικετών, το `git-tfs` χρησιμοποιεί αυτά τα σημάδια για να συνδέσει τα σύνολα αλλαγών του TFVC με τις υποβολές Git.
Αυτό έχει ως συνέπεια ότι οι υποβολές μας θα έχουν διαφορετικό αριθμο SHA-1 πριν και μετά την ώθησή τους στο TFVC.

===== Ροή εργασίας των `git-tf` και `git-tfs`

[NOTE]
====
Ανεξάρτητα από το εργαλείο που χρησιμοποιούμε, θα πρέπει να ορίσουμε μερικές τιμές διαμόρφωσης του Git για να αποφύγουμε την εμφάνιση προβλημάτων.

[source,console]
----
$ git config set --local core.ignorecase=true
$ git config set --local core.autocrlf=false
----
====

Το προφανές επόμενο πράγμα που θα θελήσουμε να κάνουμε είναι να εργαστούμε στο έργο.
Το TFVC και το TFS έχουν διάφορα χαρακτηριστικά που μπορεί να προσθέτουν πολυπλοκότητα στη ροή εργασίας μας:

. Οι κλάδοι χαρακτηριστικών που δεν αναπαριστώνται στο TFVC προσθέτουν μια μικρή πολυπλοκότητα.
  Αυτό έχει να κάνει με τον *πολύ* διαφορετικό τρόπο με τον οποίο οι TFVC και Git αναπαριστούν κλάδους.
. Ύπόψη ότι το TFVC επιτρέπει στους χρήστες να ανακτήσουν τα αρχεία από τον διακομιστή, κλειδώνοντάς τα έτσι ώστε κανένας άλλος δεν μπορεί να τα επεξεργάζεται.
  Αυτό προφανώς δεν θα μας εμποδίσει να τα επεξεργαστούμε στο τοπικό αποθετήριό μας, αλλά θα μπορούσε να μας δυσκολέψει όταν έρχεται η ώρα να ωθήσουμε τις αλλαγές μας στον διακομιστή TFVC.
. Το TFS έχει την έννοια των ``φραγμένων'' `checkin`, όπου ένας κύκλος δοκιμής TFS πρέπει να ολοκληρωθεί με επιτυχία πριν επιτραπεί η `checkin`.
  Αυτό χρησιμοποιεί τη λειτουργία ``shelve'' του TFVC, την οποία δεν καλύπτουμε λεπτομερώς εδώ.
  Μπορούμε να προσποιηθούμε με χειροκίνητο τρόπο με το `git-tf` και το `git-tfs` παρέχει την εντολή `checkinto` που έχει επίγνωση της φραγής.

Χάρη συντομίας, αυτό που θα καλύψουμε εδώ είναι το βατό μονοπάτι, το οποίο παρακάμπτει ή αποφεύγει τα περισσότερα από αυτά τα προβλήματα.

===== Ροή εργασίας: `git-tf`

Ας υποθέσουμε ότι έχουμε κάνει κάποια εργασία, κάναμε μερικές υποβολές του Git στον `master` και είμαστε έτοιμοι να μοιραστούμε την πρόοδό μας στον διακομιστή TFVC.
Εδώ είναι το αποθετήριο Git:

[source,console]
----
$ git log --oneline --graph --decorate --all
* 4178a82 (HEAD, master) update code
* 9df2ae3 update readme
* d44b17a (tag: TFS_C35190, origin_tfs/tfs) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard
----

Θέλουμε να πάρουμε το στιγμιότυπο που βρίσκεται στην `4178a82` και να το ωθήσουμε στον διακομιστή TFVC.
Καταρχάς ας δούμε αν οποιοσδήποτε από τους συμπαίκτες μας έκανε κάτι από τότε που συνδεθήκαμε τελευταία φορά:

[source,console]
----
$ git tf fetch
Username: domain\user
Password:
Connecting to TFS...
Fetching $/myproject at latest changeset: 100%, done.
Downloaded changeset 35320 as commit 8ef06a8. Updated FETCH_HEAD.
$ git log --oneline --graph --decorate --all
* 8ef06a8 (tag: TFS_C35320, origin_tfs/tfs) just some text
| * 4178a82 (HEAD, master) update code
| * 9df2ae3 update readme
|/
* d44b17a (tag: TFS_C35190) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard
----

Φαίνεται ότι κάποιος άλλος εργάζεται επίσης και συνεπώς τώρα έχουμε αποκλίνον ιστορικό.
Εδώ είναι που λάμπει το Git λάμπει, αλλά έχουμε δύο επιλογές για το πώς θα προχωρήσουμε:

. Μία υποβολή συγχώνευσης φαίνεται λογική ως χρήστης του Git (άλλωστε αυτό είναι που κάνει η `git pull`) και η `git-tf` μπορεί να το κάνει αυτό για μας με ένα απλό `git tf pull`.
  Ας έχουμε υπόψη, ωστόσο, ότι το TFVC δεν σκέφτεται με αυτόν τον τρόπο και αν ωθήσουμε υποβολές συγχώνευσης, το ιστορικό μας θα αρχίσει να φαίνεται διαφορετικό στις δύο πλευρές, κάτι που μπορεί να προκαλέσει σύγχυση.
  Αν σχεδιάζουμε να υποβάλουμε όλες τις αλλαγές μας ως ένα σύνολο αλλαγών, αυτή είναι ίσως η πιο εύκολη επιλογή.
. Η αλλαγή βάσης καθιστά το ιστορικό υποβολών μας γραμμικό, πράγμα που σημαίνει ότι έχουμε τη δυνατότητα να μετατρέψουμε καθεμία από τις υποβολές μας Git σε ένα σύνολο αλλαγών του TFVC.
  Δεδομένου ότι αυτό αφήνει τις περισσότερες επιλογές ανοικτές, συνιστάται να το κάνουμε με αυτόν τον τρόπο. Το `git-tf` μας διευκολύνει ακόμα και με την `git tf pull --rebase`.

Η επιλογή είναι δική μας.
Σε αυτό το παράδειγμα, θα κάνουμε αλλαγή βάσης:

[source,console]
----
$ git rebase FETCH_HEAD
First, rewinding head to replay your work on top of it...
Applying: update readme
Applying: update code
$ git log --oneline --graph --decorate --all
* 5a0e25e (HEAD, master) update code
* 6eb3eb5 update readme
* 8ef06a8 (tag: TFS_C35320, origin_tfs/tfs) just some text
* d44b17a (tag: TFS_C35190) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard
----

Τώρα είμαστε έτοιμοι να κάνουμε `checkin` στον διακομιστή TFVC.
Το `git-tf` μας δίνει τις εξής επιλογές: να δημιουργήσουμε ένα ενιαίο σύνολο αλλαγών που αναπαριστά όλες τις αλλαγές από την τελευταία `checkin` (`--shallow`, που είναι και η προεπιλογή) ή να δημιουργήσουμε ένα νέο σύνολο αλλαγών για κάθε υποβολή Git (`--deep`).
Σε αυτό το παράδειγμα, θα δημιουργήσουμε μόνο ένα σύνολο αλλαγών:

[source,console]
----
$ git tf checkin -m 'Updating readme and code'
Username: domain\user
Password:
Connecting to TFS...
Checking in to $/myproject: 100%, done.
Checked commit 5a0e25e in as changeset 35348
$ git log --oneline --graph --decorate --all
* 5a0e25e (HEAD, tag: TFS_C35348, origin_tfs/tfs, master) update code
* 6eb3eb5 update readme
* 8ef06a8 (tag: TFS_C35320) just some text
* d44b17a (tag: TFS_C35190) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard
----


Υπάρχει μια νέα ετικέτα `TFS_C35348`, που υποδεικνύει ότι το TFVC αποθηκεύει ακριβώς το ίδιο στιγμιότυπο με την υποβολή `5a0e25e`.
Είναι σημαντικό να σημειώσουμε ότι δεν είναι απαραίτητο κάθε υποβολή Git να έχει ένα ακριβές αντίγραφο στο TFVC· η υποβολή `6eb3eb5`, για παράδειγμα, δεν υπάρχει σε κανένα σημείο του διακομιστή.

Αυτή είναι η κύρια ροή εργασίας.
Υπάρχουν μερικά άλλα θέματα που πρέπει να έχουμε κατά νου:

* Δεν υπάρχει διακλάδωση.
  Το `git-tf` μπορεί να δημιουργήσει μόνο αποθετήρια Git από έναν κλάδο TFVC κάθε φορά.
* Συνεργαζόμαστε χρησιμοποιώντας είτε TFVC είτε Git αλλά όχι και τα δύο.
  Διαφορετικοί κλώνοι `git-tf` του ίδιου αποθετηρίου TFVC μπορεί να έχουν διαφορετικούς SHA-1 υποβολής, οι οποίοι θα μας προκαλέσουν ατελείωτους πονοκεφάλους.
* Αν η ροή εργασίας της ομάδας μας περιλαμβάνει συνεργασία με το Git και συγχρονισμό με το TFVC περιοδικά, συνδεόμαστε μόνο στο TFVC μόνο με ένα από τα αποθετήρια Git.

===== Ροή εργασίας: `git-tfs`

Ας περάσουμε από το ίδιο σενάριο χρησιμοποιώντας το `git-tfs`.
Ακολουθούν οι νέες υποβολές που έχουμε κάνει στον κλάδο `master` στο αποθετήριο Git:

[source,powershell]
----
PS> git log --oneline --graph --all --decorate
* c3bd3ae (HEAD, master) update code
* d85e5a2 update readme
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 (tfs/default) Hello
* b75da1a New project
----

Τώρα ας δούμε αν κάποιος άλλος έχει κάνει δουλειά ενώ εμείς κάναμε τις δικές μας αλλαγές:

[source,powershell]
----
PS> git tfs fetch
C19 = aea74a0313de0a391940c999e51c5c15c381d91d
PS> git log --all --oneline --graph --decorate
* aea74a0 (tfs/default) update documentation
| * c3bd3ae (HEAD, master) update code
| * d85e5a2 update readme
|/
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project
----

Ναι, αποδεικνύεται ότι ο συνεργάτης μας έχει προσθέσει ένα νέο σύνολο αλλαγών TFVC, το οποίο εμφανίζεται με τη νέα υποβολή `aea74a0` και ο απομακρυσμένος κλάδος `tfs/default` μετακινήθηκε.

Όπως και με το `git-tf`, έχουμε δύο βασικές επιλογές για τον τρόπο επίλυσης αυτού του αποκλίνοντος ιστορικού:

. Αλλαγή βάσης για να διατηρήσουμε το ιστορικό γραμμικό.
. Συγχώνευση για να διατηρήσουμε αυτό που πραγματικά συνέβη.

Σε αυτήν την περίπτωση, θα κάνουμε ένα ``βαθύ'' `checkin`, στο οποίο κάθε υποβολή Git θα γίνει ένα σύνολο αλλαγών TFVC, οπότε θέλουμε να αλλάξουμε τη βάση.

[source,powershell]
----
PS> git rebase tfs/default
First, rewinding head to replay your work on top of it...
Applying: update readme
Applying: update code
PS> git log --all --oneline --graph --decorate
* 10a75ac (HEAD, master) update code
* 5cec4ab update readme
* aea74a0 (tfs/default) update documentation
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project
----

Τώρα είμαστε έτοιμοι να ολοκληρώσουμε τη συνεισφορά μας ελέγχοντας τον κώδικά μας στον διακομιστή TFVC.
Θα χρησιμοποιήσουμε την εντολή `rcheckin` για να δημιουργήσουμε ένα σύνολο αλλαγών TFVC για κάθε υποβολή Git στη διαδρομή από τον HEAD στον πρώτο απομακρυσμένο κλάδο `tfs` που βρέθηκε (η εντολή `checkin` θα δημιουργούσε μόνο ένα σύνολο αλλαγών, όπως η συναρμογή υποβολών στο Git).

[source,powershell]
----
PS> git tfs rcheckin
Working with tfs remote: default
Fetching changes from TFS to minimize possibility of late conflict...
Starting checkin of 5cec4ab4 'update readme'
 add README.md
C20 = 71a5ddce274c19f8fdc322b4f165d93d89121017
Done with 5cec4ab4b213c354341f66c80cd650ab98dcf1ed, rebasing tail onto new TFS-commit...
Rebase done successfully.
Starting checkin of b1bf0f99 'update code'
 edit .git\tfs\default\workspace\ConsoleApplication1/ConsoleApplication1/Program.cs
C21 = ff04e7c35dfbe6a8f94e782bf5e0031cee8d103b
Done with b1bf0f9977b2d48bad611ed4a03d3738df05ea5d, rebasing tail onto new TFS-commit...
Rebase done successfully.
No more to rcheckin.
PS> git log --all --oneline --graph --decorate
* ff04e7c (HEAD, tfs/default, master) update code
* 71a5ddc update readme
* aea74a0 update documentation
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project
----

Παρατηρούμε πως μετά από κάθε επιτυχές `checkin` στον διακομιστή TFVC, το `git-tfs` αλλάζει τη βάση του υπόλοιπου έργου σε αυτό που μόλις έκανε.
Αυτό συμβαίνει επειδή προσθέτει το πεδίο `git-tfs-id` στο κάτω μέρος των μηνυμάτων υποβολής, το οποίο αλλάζει τους αριθμούς SHA-1.
Αυτό είναι ακριβώς όπως έχει σχεδιαστεί και δεν υπάρχει κάτι να μας ανησυχεί, αλλά θα πρέπει να γνωρίζουμε ότι συμβαίνει αυτό, ειδικά αν μοιραζόμαστε υποβολές Git με άλλους.

Το TFS έχει πολλές λειτουργίες που ενσωματώνονται με το σύστημα ελέγχου εκδόσεών του, όπως στοιχεία εργασίας, ορισθέντες αναθεωρητές, φραγμένα checkin κ.ο.κ.
Η εργασία με αυτά τα χαρακτηριστικά χρησιμοποιώντας μόνο το εργαλείο γραμμής εντολών μπορεί να είναι δύσχρηστη, αλλά ευτυχώς το git-tfs μας επιτρέπει να ξεκινήσουμε ένα γραφικό εργαλείο checkin (`checkintool`) πολύ εύκολα:

[source,powershell]
----
PS> git tfs checkintool
PS> git tfs ct
----

Μοιάζει λίγο σαν αυτό:

.`git-tfs checkintool`.
image::images/git-tfs-ct.png[`git-tfs checkintool`.]

Αυτό είναι οικείο στους χρήστες του TFS, καθώς είναι ο ίδιος διάλογος που ξεκινάει μέσα από το Visual Studio.

Το `git-tfs` μας επιτρέπει επίσης να ελέγχουμε τους κλάδους του TFVC από το αποθετήριο Git.
Για παράδειγμα, ας δημιουργήσουμε ένα:

[source,powershell]
----
PS> git tfs branch $/tfvc-test/featureBee
The name of the local branch will be : featureBee
C26 = 1d54865c397608c004a2cadce7296f5edc22a7e5
PS> git log --oneline --graph --decorate --all
* 1d54865 (tfs/featureBee) Creation branch $/myproject/featureBee
* ff04e7c (HEAD, tfs/default, master) update code
* 71a5ddc update readme
* aea74a0 update documentation
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project
----

Η δημιουργία ενός κλάδου στο TFVC σημαίνει την προσθήκη ενός συνόλου αλλαγών όπου αυτό υπάρχει αυτός ο κλάδος αυτήν τη στιγμή και αυτό προβάλλεται ως υποβολή Git.
Ας σημειωθεί επίσης ότι το `git-tfs` *δημιούργησε* τον απομακρυσμένο κλάδο `tfs/featureBee`, αλλά ο `HEAD` εξακολουθεί να δείχνει στον `master`.
Εάν θέλουμε να εργαστούμε στον νεοσύστατο κλάδο, θα θελήσουμε να βασίσουμε τις νέες υποβολές μας στην υποβολή `1d54865`, ίσως δημιουργώντας έναν θεματικό κλάδο από αυτήν την υποβολή.

===== Ανακεφαλαίωση Git και TFS

Τα `git-tf` και `git-tfs` είναι και τα δύο εξαιρετικά εργαλεία για τη διασύνδεση με έναν διακομιστή TFVC.
Μας επιτρέπουν να χρησιμοποιούμε τη δύναμη του Git τοπικά, να αποφεύγουμε να ταξιδεύουμε συνεχώς στον κεντρικό διακομιστή TFVC και να κάνουν τη ζωή μας ως προγραμματιστών πολύ πιο εύκολη, χωρίς να αναγκάζουν ολόκληρη την ομάδα μας να μεταναστεύσει στο Git.
Εάν εργαζόμαστε σε Windows (που είναι και το πιο πιθανό, εφόσον η ομάδα μας χρησιμοποιεί το TFS), πιθανότατα θέλουμε να χρησιμοποιούμε το `git-tfs`, καθώς το σύνολο χαρακτηριστικών του είναι πιο πλήρες, αλλά αν εργαζόμαστε σε άλλη πλατφόρμα, θα θέλαμε να χρησιμοποιούμε το Γιτ-tf, το οποίο είναι πιο περιορισμένο.
Όπως συμβαίνει με τα περισσότερα εργαλεία αυτού του κεφαλαίου, θα πρέπει να επιλέξουμε ένα από αυτά τα συστήματα ελέγχου εκδόσεων να είναι κανονικό (canonical) και να χρησιμοποιήσουμε το άλλο με δευτερεύοντα τρόπο —είτε το Git είτε το TFVC θα πρέπει να είναι το κέντρο συνεργασίας, αλλά όχι και τα δύο.
