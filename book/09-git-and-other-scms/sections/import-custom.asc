[[r_custom_importer]]
==== Ένας εξατομικευμένος εισαγωγέας

(((εντολές git, fast-import)))
(((εισαγωγή αποθετηρίων, από άλλα συστήματα)))
Εάν το σύστημά μας δεν είναι ένα από τα παραπάνω, θα πρέπει να αναζητήσουμε έναν εισαγωγέα σε απευθείας σύνδεση —διατίθενται ποιοτικοί εισαγωγείς για πολλά άλλα συστήματα, όπως τα CVS, Clear Case, Visual Source Safe, ακόμη και έναν κατάλογο αρχειοθηκών.
Εάν κανένα από αυτά τα εργαλεία δεν μας κάνει, έχουμε ένα πιο ανιγματώδες εργαλείο ή τέλος πάντων χρειαζόμαστε μια πιο εξατομικευμένη διαδικασία εισαγωγής, θα πρέπει να χρησιμοποιήσουμε την `git fast-import`.
Αυτή η εντολή διαβάζει απλές οδηγίες από τη stdin και γράφει συγκεκριμένα δεδομένα Git.
Είναι πολύ πιο εύκολο να δημιουργήσουμε αντικείμενα Git με αυτόν τον τρόπο από το να εκτελέσουμε τις εντολές του Git ή να προσπαθήσουμε να γράψουμε τα ανεπεξέργαστα αντικείμενα (για περισσότερες πληροφορίες, βλ. το <<ch10-git-internals#ch10-git-internals>>).
Με αυτόν τον τρόπο, μπορούμε να γράψουμε ένα script εισαγωγής που διαβάζει τις απαραίτητες πληροφορίες από το σύστημα από το οποίο εισάγουμε και εκτυπώνει απλές οδηγίες στη stdout.
Στη συνέχεια μπορούμε να εκτελέσουμε αυτό το πρόγραμμα και να παροχετεύσουμε την έξοδό του μέσω της `git fast-import`.

Για μία γρήγορη επίδειξη, θα γράψουμε έναν απλό εισαγωγέα.
Ας υποθέσουμε ότι εργαζόμαστε στον `current`, δημιουργούμε αντίγραφα ασφαλείας του έργου μας αντιγράφοντας περιστασιακά τον κατάλογο σε έναν χρονοσημασμένο `back_YYYY_MM_DD` κατάλογο αντιγράφων ασφαλείας και θέλουμε να τον εισαγάγουμε στο Git.
Η δομή του καταλόγου μας μοιάζει με αυτό:

[source,console]
----
$ ls /opt/import_from
back_2014_01_02
back_2014_01_04
back_2014_01_14
back_2014_02_03
current
----

Για να εισαγάγουμε έναν κατάλογο Git, θα πρέπει να θυμηθούμε τον τρόπο με τον οποίο το Git αποθηκεύει δεδομένα.
Όπως έχει αναφερθεί, το Git είναι βασικά μια συνδεδεμένη λίστα αντικειμένων υποβολής που δείχνουν σε ένα στιγμιότυπο του περιεχομένου.
Το μόνο που έχουμε να κάνουμε είναι να πούμε στην `fast-import` ποια είναι τα στιγμιότυπα του περιεχομένου, ποια δεδομένα υποβολών δείχνουν σε αυτά και τη χρονική σειρά τους.
Η στρατηγική μας θα είναι να περάσουμε από όλα τα στιγμιότυπα ένα προς ένα και να δημιουργήσουμε υποβολές με τα περιεχόμενα κάθε καταλόγου, συνδέοντας κάθε υποβολή με την προηγούμενη.

Όπως κάναμε στην ενότητα <<ch08-customizing-git#r_an_example_git_enforced_policy>>, θα το γράψουμε σε Ruby, επειδή είναι αυτό που γενικά δουλεύουμε και είναι εύκολο να το διαβαστεί.
Μπορούμε να γράψουμε αρκετά εύκολα το συγκεκριμένο script σε οποιαδήποτε γλώσσα με την οποία είμαστε εξοικειωμένοι —χρειάζεται μόνο να τυπώσουμε τις κατάλληλες πληροφορίες στη `stdout`.
Και αν έχουμε Windows, αυτό σημαίνει ότι θα πρέπει να προσέξουμε να μην εισάγουμε χαρακτήρες επαναφοράς (CR) στο τέλος των γραμμών μας —η `git fast-import` είναι πολύ ιδιότροπη σε αυτό το θέμα και θέλει μόνο χαρακτήρες τροφοδότησης γραμμής (LF) και όχι χαρακτήρες επαναφοράς και τροφοδότησης γραμμής(CRLF) που χρησιμοποιούν τα Windows.

Αρχικά, θα μεταβούμε στον κατάλογο-στόχο και θα αναγνωρίσουμε κάθε υποκατάλογο, καθένας από τους οποίους είναι ένα στιγμιότυπο που θέλουμε να εισάγουμε ως υποβολή.
Θα μεταβούμε σε κάθε υποκατάλογο και θα εκτυπώσουμε τις εντολές που είναι απαραίτητες για την εξαγωγή του.
Ο βασικός μας κύριος βρόχος μοιάζει με αυτόν:

[source,ruby]
----
last_mark = nil

# Βρόχος επανάληψης σε όλους τους υποκαταλόγους
Dir.chdir(ARGV[0]) do
  Dir.glob("*").each do |dir|
    next if File.file?(dir)

    # Μετακινήσου στον κατάλογο-στόχο
    Dir.chdir(dir) do
      last_mark = print_export(dir, last_mark)
    end
  end
end
----

Εκτελούμε την `print_export` μέσα σε κάθε κατάλογο, ο οποίος λαμβάνει το δηλωτικό και το σημάδι του προηγούμενου στιγμιότυπου και επιστρέφει το δηλωτικό και το σημάδι αυτού. Με αυτόν τον τρόπο, θα μπορέσουμε να τα συνδέσουμε σωστά.
``Σημάδι'' (mark) είναι ο όρος της `fast-import` για ένα αναγνωριστικό που δίνουμε σε μια υποβολή· όταν δημιουργούμε υποβολές, δίνουμε σε καθεμία από αυτές ένα σημάδι το οποίο μπορούμε να χρησιμοποιήσουμε για να συνδεθούμε σε αυτήν από άλλες υποβολές.
Έτσι, το πρώτο πράγμα που πρέπει να κάνουμε στη μέθοδο `print_export` μας είναι να δημιουργήσουμε ένα σημάδι από το όνομα του καταλόγου:

[source,ruby]
----
mark = convert_dir_to_mark(dir)
----

Θα το κάνουμε αυτό δημιουργώντας έναν πίνακα από καταλόγους και χρησιμοποιώντας την τιμή του δείκτη ως σημάδι, διότι το σημάδι πρέπει να είναι ένας ακέραιος αριθμός.
Η μέθοδος μας μοιάζει με αυτό:

[source,ruby]
----
$marks = []
def convert_dir_to_mark(dir)
  if !$marks.include?(dir)
    $marks << dir
  end
  ($marks.index(dir) + 1).to_s
end
----

Τώρα που έχουμε μια ακέραια αναπαράσταση της υποβολής μας, χρειαζόμαστε μια ημερομηνία για τα μεταδεδομένα της υποβολής.
Επειδή η ημερομηνία εκφράζεται στο όνομα του καταλόγου, θα την εξάγουμε κάνοντας συντακτική ανάλυση.
Η επόμενη γραμμή στο αρχείο `print_export` είναι:

[source,ruby]
----
date = convert_dir_to_date(dir)
----

όπου η `convert_dir_to_date` ορίζεται ως:

[source,ruby]
----
def convert_dir_to_date(dir)
  if dir == 'current'
    return Time.now().to_i
  else
    dir = dir.gsub('back_', '')
    (year, month, day) = dir.split('_')
    return Time.local(year, month, day).to_i
  end
end
----

Αυτό επιστρέφει μια ακέραια τιμή για την ημερομηνία κάθε καταλόγου.
Το τελευταίο κομμάτι των μετα-πληροφοριών που χρειάζεστε για κάθε υποβολή είναι τα δεδομένα αυτού που έκανε την υποβολή, τα οποία έχουμε κωδικοποιήσει σε μια καθολική μεταβλητή:

[source,ruby]
----
$author = 'John Doe <john@example.com>'
----

Τώρα είμαστε έτοιμοι να ξεκινήσουμε να εκτυπώνουμε τα στοιχεία της υποβολής για τον εισαγωγέα μας.
Οι αρχικές πληροφορίες δηλώνουν ότι ορίζουμε ένα αντικείμενο υποβολής και σε ποιον κλάδο είναι, ακολουθούμενες από το σημάδι που δημιουργήσαμε, τις πληροφορίες αυτού που υπέβαλε, και το μήνυμα υποβολής και μετά την προηγούμενη υποβολή, εφόσον υπάρχει.
Ο κώδικας μοιάζει με αυτό:

[source,ruby]
----
# Εκτύπωσε τις πληροφορίες εισαγωγής
puts 'commit refs/heads/master'
puts 'mark :' + mark
puts "committer #{$author} #{date} -0700"
export_data('imported from ' + dir)
puts 'from :' + last_mark if last_mark
----

Μπορούμε να θέσουμε τη ζώνη ώρας (-0700) αντί να τη διαβάσουμε, διότι αυτό είναι το πιο εύκολο.
Αν εισάγουμε από άλλο σύστημα, πρέπει να καθορίσουμε τη ζώνη ώρας ως διαφορά.
Το μήνυμα υποβολής πρέπει να εκφράζεται σε ειδική μορφή:

[source]
----
data (size)\n(contents)
----

Η μορφή αποτελείται από τη λέξη data, το μέγεθος των προς ανάγνωση δεδομένων, μια νέα γραμμή και τελικά τα δεδομένα.
Επειδή πρέπει να χρησιμοποιήσουμε την ίδια μορφή για να καθορίσουμε αργότερα τα περιεχόμενα του αρχείου, δημιουργούμε μια βοηθητική μέθοδο, `export_data`:

[source,ruby]
----
def export_data(string)
  print "data #{string.size}\n#{string}"
end
----

Το μόνο που έχει απομείνει είναι να καθορίσουμε τα περιεχόμενα του αρχείου για κάθε στιγμιότυπο.
Αυτό είναι εύκολο, επειδή το κάθε στιγμιότυπο είναι σε έναν κατάλογο —μπορούμε να εκτυπώσουμε την εντολή `deleteall` ακολουθούμενη από τα περιεχόμενα κάθε αρχείου στον κατάλογο.
Το Git θα καταγράψει στη συνέχεια κάθε στιγμιότυπο κατάλληλα:

[source,ruby]
----
puts 'deleteall'
Dir.glob("**/*").each do |file|
  next if !File.file?(file)
  inline_data(file)
end
----

Σημείωση: Επειδή πολλά συστήματα ντιμετωπίζουν τις αναθεωρήσεις τους ως μεταβολές από μία υποβολή σε μία άλλη, η `fast-import` μπορεί επίσης να λάβει εντολές με κάθε υποβολή για να καθορίσει ποια αρχεία έχουν προστεθεί, αφαιρεθεί ή τροποποιηθεί και ποια είναι τα νέα περιεχόμενα.
Θα μπορούσαμε να υπολογίσουμε τις διαφορές μεταξύ των στιγμιότυπων και να δώσουμε μόνο αυτά τα δεδομένα, αλλά αυτό είναι πιο περίπλοκο —μπορούμε απλά να δώσουμε στο Git όλα τα δεδομένα και να αφήσουμε αυτό να καταλάβει τι γίνεται.
Αν κάτι τέτοιο ταιριάζει καλύτερα στα δεδομένα μας, καλό είναι να ελέγξουμε τη σελίδα του εγχειριδίου για την `fast-import` για λεπτομέρειες σχετικά με τον τρόπο παροχής των δεδομένων μας με αυτόν τον τρόπο.

Η μορφή εμφάνισης των νέων περιεχομένων του αρχείου ή ο προσδιορισμός ενός τροποποιημένου αρχείου με τα νέα περιεχόμενα είναι ο εξής:

[source]
----
M 644 inline path/to/file
data (size)
(file contents)
----

Εδώ, `644` είναι ο τρόπος λειτουργίας (αν έχουμε εκτελέσιμα αρχεία, θα πρέπει να τα εντοπίσουμε και να θέσουμε τρόπο λειτουργίας `755` αντί `644`), και η `inline` λέει ότι θα παραθέσουμε το περιεχόμενο αμέσως μετά από αυτήν τη γραμμή.
Η μέθοδος `inline_data` μοιάζει με κάτι τέτοιο:

[source,ruby]
----
def inline_data(file, code = 'M', mode = '644')
  content = File.read(file)
  puts "#{code} #{mode} inline #{file}"
  export_data(content)
end
----

Επαναχρησιμοποιούμε τη μέθοδο `export_data` που ορίσαμε νωρίτερα, επειδή είναι ο ίδιος τρόπος με αυτόν που καθορίσαμε τα δεδομένα του μηνύματος αποστολής.

Το τελευταίο πράγμα που πρέπει να κάνουμε είναι να επιστρέψουμε το τρέχον σημάδι ώστε να μπορεί να μεταβιβαστεί στην επόμενη επανάληψη:

[source,ruby]
----
return mark
----

[NOTE]
====
Εάν τρέχουμε σε Windows, θα πρέπει οπωσδήποτε να προσθέτουμε ένα επιπλέον βήμα.
Όπως αναφέρθηκε προηγουμένως, τα Windows χρησιμοποιούν CRLF για χαρακτήρες νέας γραμμής ενώ η `git fast-import` αναμένει μόνο LF.
Για να αντιμετωπίσουμε αυτό το πρόβλημα και να κάνουμε την `git fast-import` ευτυχισμένη, πρέπει πρέπει να πούμε στη Ruby να χρησιμοποιήσει τον LF αντί του CRLF:

[source,ruby]
----
$stdout.binmode
----
====

Αυτό ήταν.
Ακολουθεί ολόκληρο το script:

[source,ruby]
----
#!/usr/bin/env ruby

$stdout.binmode
$author = "John Doe <john@example.com>"

$marks = []
def convert_dir_to_mark(dir)
    if !$marks.include?(dir)
        $marks << dir
    end
    ($marks.index(dir)+1).to_s
end


def convert_dir_to_date(dir)
    if dir == 'current'
        return Time.now().to_i
    else
        dir = dir.gsub('back_', '')
        (year, month, day) = dir.split('_')
        return Time.local(year, month, day).to_i
    end
end

def export_data(string)
    print "data #{string.size}\n#{string}"
end

def inline_data(file, code='M', mode='644')
    content = File.read(file)
    puts "#{code} #{mode} inline #{file}"
    export_data(content)
end

def print_export(dir, last_mark)
    date = convert_dir_to_date(dir)
    mark = convert_dir_to_mark(dir)

    puts 'commit refs/heads/master'
    puts "mark :#{mark}"
    puts "committer #{$author} #{date} -0700"
    export_data("imported from #{dir}")
    puts "from :#{last_mark}" if last_mark

    puts 'deleteall'
    Dir.glob("**/*").each do |file|
        next if !File.file?(file)
        inline_data(file)
    end
    mark
end


# Βρόχος επανάληψης σε όλους τους υποκαταλόγους
last_mark = nil
Dir.chdir(ARGV[0]) do
    Dir.glob("*").each do |dir|
        next if File.file?(dir)

        # Μετακινήσου στον κατάλογο-στόχο
        Dir.chdir(dir) do
            last_mark = print_export(dir, last_mark)
        end
    end
end
----

Αν εκτελέσουμε αυτό το script, θα πάρουμε περιεχόμενο που μοιάζει με αυτό:

[source,console]
----
$ ruby import.rb /opt/import_from
commit refs/heads/master
mark :1
committer John Doe <john@example.com> 1388649600 -0700
data 29
imported from back_2014_01_02deleteall
M 644 inline README.md
data 28
# Hello

This is my readme.
commit refs/heads/master
mark :2
committer John Doe <john@example.com> 1388822400 -0700
data 29
imported from back_2014_01_04from :1
deleteall
M 644 inline main.rb
data 34
#!/bin/env ruby

puts "Hey there"
M 644 inline README.md
(...)
----

Για να τρέξουμε τον εισαγωγέα, παροχετεύουμε αυτήν την έξοδο μέσω της `git fast-import` ενώ βρισκόμαστε στον κατάλογο Git που θέλουμε να εισάγουμε.
Μπορούμε να δημιουργήσουμε ένα νέο κατάλογο και στη συνέχεια να εκτελέσουμε την `git init` μέσα σε αυτόν για να δημιουργήσουμε ένα σημείο εκκίνησης και στη συνέχεια να εκτελέσουμε το script μας:

[source,console]
----
$ git init
Initialized empty Git repository in /opt/import_to/.git/
$ ruby import.rb /opt/import_from | git fast-import
git-fast-import statistics:
---------------------------------------------------------------------
Alloc'd objects:       5000
Total objects:           13 (         6 duplicates                  )
      blobs  :            5 (         4 duplicates          3 deltas of          5 attempts)
      trees  :            4 (         1 duplicates          0 deltas of          4 attempts)
      commits:            4 (         1 duplicates          0 deltas of          0 attempts)
      tags   :            0 (         0 duplicates          0 deltas of          0 attempts)
Total branches:           1 (         1 loads     )
      marks:           1024 (         5 unique    )
      atoms:              2
Memory total:          2344 KiB
       pools:          2110 KiB
     objects:           234 KiB
---------------------------------------------------------------------
pack_report: getpagesize()            =       4096
pack_report: core.packedGitWindowSize = 1073741824
pack_report: core.packedGitLimit      = 8589934592
pack_report: pack_used_ctr            =         10
pack_report: pack_mmap_calls          =          5
pack_report: pack_open_windows        =          2 /          2
pack_report: pack_mapped              =       1457 /       1457
---------------------------------------------------------------------
----

Όπως μπορούμε να δούμε, όταν ολοκληρώενται με επιτυχία, μας δίνει μια κάμποσα στατιστικά για το τι έχει επιτύχει.
Σε αυτήν την περίπτωση, εισάγαμε 13 αντικείμενα συνολικά για 4 υποβολές σε 1 υποκατάστημα.
Τώρα, μπορούμε να εκτελέσουμε την `git log` για να δούμε το νέο μας ιστορικό:

[source,console]
----
$ git log -2
commit 3caa046d4aac682a55867132ccdfbe0d3fdee498
Author: John Doe <john@example.com>
Date:   Tue Jul 29 19:39:04 2014 -0700

    imported from current

commit 4afc2b945d0d3c8cd00556fbe2e8224569dc9def
Author: John Doe <john@example.com>
Date:   Mon Feb 3 01:00:00 2014 -0700

    imported from back_2014_02_03
----

Αυτό ήταν! Ένα ωραίο, καθαρό αποθετήριο Git.
Είναι σημαντικό να σημειώσουμε ότι τίποτα δεν έχει ανακτηθεί —αρχικά δεν έχουμε αρχεία στον κατάλογο εργασίας μας.
Για να τα πάρουμε, πρέπει να επαναφέρουμε τον κλάδο μας στο σημείο όπου είναι τώρα ο `master`:

[source,console]
----
$ ls
$ git reset --hard master
HEAD is now at 3caa046 imported from current
$ ls
README.md main.rb
----

Μπορούμε να κάνουμε πολλά περισσότερα με το εργαλείο `fast-import` —να χειριστούμε διαφορετικά είδη, δυαδικά δεδομένα, πολλαπλούς κλάδους και συγχωνεύσεις, ετικέτες, δείκτες προόδου και πολλά άλλα.
Ορισμένα παραδείγματα πιο σύνθετων σεναρίων είναι διαθέσιμα στον κατάλογο `contrib/fast-import` του πηγαίου κώδικα του Git.
