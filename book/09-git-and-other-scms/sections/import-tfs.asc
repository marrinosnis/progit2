[[r_git_tfs]]
==== TFS

(((TFS)))(((εισαγωγή αποθετηρίου, από TFS)))
Αν η ομάδα μας μετατρέπει τον έλεγχο πηγαίου κώδικα από το TFVC στο Git, θα θελήσουμε να έχουμε την πιο πιστή μετατροπή που μπορούμε να αποκτήσουμε.
Αυτό σημαίνει ότι, αν και είδαμε τόσο την `git-tfs` όσο και την `git-tf` στην ενότητα της διαλειτουργικότητας, θα δούμε μόνο την `git-tfs` σε αυτό το μέρος, επειδή η `git-tfs` υποστηρίζει κλάδους κάτι που είναι απαγορευτικά δύσκολο με την `git-tf`.

[NOTE]
====
Πρόκειται για μια μονόδρομη μετατροπή.
Το αποθετήριο Git που προκύπτει δεν θα μπορεί να συνδεθεί με το αρχικό έργο TFVC.
====

Το πρώτο πράγμα που πρέπει να κάνουμε είναι να αντιστοιχίσουμε τα ονόματα χρηστών.
Το TFVC είναι αρκετά φιλελεύθερο με αυτό που πηγαίνει στο πεδίο author για σύνολα αλλαγών, αλλά το Git θέλει ένα ανθρωπανάγνωστο όνομα και διεύθυνση e-mail.
Μπορούμε να λάβουμε αυτές τις πληροφορίες από τον πελάτη γραμμής εντολών `tf`, όπως π.χ.:

[source,powershell]
----
PS> tf history $/myproject -recursive > AUTHORS_TMP
----

Αυτό τραβάει όλα τα σύνολα αλλαγών στο ιστορικό του έργου και τα βάζει στο αρχείο AUTHORS_TMP που θα επεξεργαστούμε για την εξαγωγή των δεδομένων της στήλης 'User' (2η στήλη).
Ανοίγουμε το αρχείο και βρίσκουμε ποιοι χαρακτήρες ξεκινούν και τελειώνουν τη στήλη αυτή και αντικαθιστούμε στην ακόλουθη γραμμή εντολών τις παραμέτρους `11-20` της εντολής `cut` με αυτούς που βρέθηκαν:

[source,powershell]
----
PS> cat AUTHORS_TMP | cut -b 11-20 | tail -n+3 | uniq | sort > AUTHORS
----

Η εντολή `cut` διατηρεί μόνο τους χαρακτήρες μεταξύ των θέσεων 11 και 20 από κάθε γραμμή.
Η εντολή `tail` παραλείπει τις δύο πρώτες γραμμές, οι οποίες είναι κεφαλίδες πεδίων και υπογραμμίσεις ASCII-art.
Το αποτέλεσμα όλων αυτών παροχετεύεται στη `uniq` για να εξαλείψει τις διπλές καταχωρήσεις και αποθηκεύεται σε ένα αρχείο που ονομάζεται `AUTHORS`.
Το επόμενο βήμα είναι χειροκίνητο· για να μπορέσει η `git-tfs` να χρησιμοποιήσει αποτελεσματικά αυτό το αρχείο, κάθε γραμμή πρέπει να είναι σε αυτήν τη μορφή:

[source,text]
----
DOMAIN\username = User Name <email@address.com>
----

Το τμήμα στα αριστερά είναι το πεδίο ``User'' από το TFVC και το τμήμα στη δεξιά πλευρά του `=` είναι το όνομα χρήστη που θα χρησιμοποιηθεί για τις υποβολές Git.

Μόλις έχουμε αυτό το αρχείο, το επόμενο πράγμα που πρέπει να κάνουμε είναι να φτιάξουμε έναν πλήρη κλώνο του έργου TFVC που μας ενδιαφέρει:

[source,powershell]
----
PS> git tfs clone --with-branches --authors=AUTHORS https://username.visualstudio.com/DefaultCollection $/project/Trunk project_git
----

Στη συνέχεια, θέλουμε να καθαρίσουμε τις ενότητες `git-tfs-id` από το κάτω μέρος των μηνυμάτων υποβολής.
Αυτό μπορεί να γίνει με την ακόλουθη εντολή:

[source,powershell]
----
PS> git filter-branch -f --msg-filter 'sed "s/^git-tfs-id:.*$//g"' -- --all
----

Αυτό χρησιμοποιεί την εντολή `sed` από το περιβάλλον Git-bash για να αντικαταστήσει οποιαδήποτε γραμμή που ξεκινά με  `git-tfs-id:` με κενό, το οποίο το Git θα αγνοήσει.

Μόλις γίνει αυτό, είμαστε έτοιμοι να προσθέσουμε ένα νέο απομακρυσμένο αποθετήριο, να ωθήσουμε όλους τους κλάδους μας και να αρχίσουμε να εργαζόμαστε στο Git.
