=== Βασικές έννοιες διακλαδώσεων και συγχωνεύσεων

Ας δείτε ένα απλό παράδειγμα διακλάδωσης και συγχώνευσης με μία ροή εργασίας που είναι πιθανό να χρησιμοποιήσετε στον πραγματικό κόσμο.
Θα ακολουθήσετε τα παρακάτω βήματα:

. Θα κάνετε αλλαγές σε μία ιστοσελίδα.
. Θα δημιουργήσετε έναν κλάδο για μία νέα ιστορία χρήστη (user story) την οποία δουλεύετε.
. θα κάνετε αλλαγές σε αυτό τον κλάδο.

Σε αυτό το σημείο θα δεχτείτε ένα τηλεφώνημα ότι υπάρχει ένα άλλο κρίσιμο πρόβλημα και πρέπει να αναπτύξετε μία άμεση λύση.
Θα κάνετε τα παρακάτω:

. Θα μεταβείτε στον κλάδο παραγωγής.
. Θα δημιουργήσετε έναν κλάδο στον οποίο θα προσθέσετε την επείγουσα λυση (hotfix).
. Αφού ο κώδικάς σας δοκιμαστεί, θα συγχωνεύσετε τον κλάδο με το hotfix και θα τον ωθήσετε στην παραγωγή.
. Θα επιστρέψετε στην ιστορία χρήστη και θα συνεχίσετε να την δουλεύετε.

[[r_basic_branching]]
==== Διακλαδώσεις -- τα βασικά

(((κλάδοι, βασική ροή εργασίας)))
Αρχικά ας υποθέσουμε ότι δουλεύετε σε ένα έργο και έχετε κάνει ήδη μερικές υποβολές στον κλάδο `master`.

.Ένα απλό ιστορικό υποβολών.
image::images/basic-branching-1.png[Ένα απλό ιστορικό υποβολών.]

Αποφασίσατε ότι θα δουλέψετε στο πρόβλημα #53 του συστήματος παρακολούθησης προβλημάτων που χρησιμοποιεί η εταιρεία σας.
Για να δημιουργήσετε έναν κλάδο και να μεταβείτε σε αυτό συγχρόνως, μπορείτε να τρέξετε την εντολή `git checkout` με τη σημαία `-b`:

[source,console]
----
$ git checkout -b iss53
Switched to a new branch "iss53"
----

Η παραπάνω εντολή είναι συντομογραφία για το εξής:

[source,console]
----
$ git branch iss53
$ git checkout iss53
----

.Δημιουργία νέου δείκτη σε κλάδο.
image::images/basic-branching-2.png[Δημιουργία νέου δείκτη σε κλάδο.]

Επεξεργάζεστε την ιστοσελίδα σας και κάνετε μερικές υποβολές.
Με τις υποβολές ο κλάδος `iss53` προχωρά, διότι τον έχετε κάνει checkout (δηλαδή ο `HEAD` δείχνει σε αυτό τον κλάδο):

[source,console]
----
$ vim index.html
$ git commit -a -m 'Create new footer [issue 53]'
----

.Ο κλάδος `iss53` προχώρησε εξαιτίας των αλλαγών σας.
image::images/basic-branching-3.png[Ο κλάδος `iss53` προχώρησε εξαιτίας των αλλαγών σας.]

Τώρα λαμβάνετε το τηλεφώνημα ότι υπάρχει ένα άλλο επείγον πρόβλημα στην ιστοσελίδα και πρέπει να το αντιμετωπίσετε αμέσως. 
Στο Git, δεν είναι απαραίτητο να δουλέψετε σε αυτό το πρόβλημα παράλληλα με τις αλλαγές που έχετε ήδη κάνει στον κλάδο `iss53`, ούτε να καταβάλλετε πολλή δουλειά ώστε να αναιρέσετε τις αλλαγές που έχετε ήδη κάνει και να δουλέψετε στο επείγον πρόβλημα και να εφαρμόσετε τη λύση σας σε ό,τι βρίσκεται εκείνη τη στιγμή στη γραμμή της παραγωγής. 
Το μόνο που έχετε να κάνετε είναι να επιστρέψετε στον κλάδο `master`.

Ωστόσο πριν το κάνετε αυτό, σημειώστε ότι αν υπάρχουν στον κατάλογο εργασίας σας ή στον προθάλαμο αλλάγες που δεν έχουν υποβληθεί και έρχονται σε σύγκρουση με τον κλάδο στον οποίο θέλετε να μεταβείτε, το Git δεν θα σας αφήσει να αλλάξετε κλάδο.
Το καλύτερο είναι να έχετε μία καθαρή κατασταση εργασίας όταν μεταβαίνετε από έναν κλάδο σε άλλο.
Υπάρχουν τρόποι να παρακάμψετε αυτή τη συμπεριφορά (με τις εντολές `git stash` και `git commit --amend`) που θα καλύψουμε στη συνέχεια, στην ενότητα <<ch07-git-tools#r_git_stashing>>.
Προς το παρόν, ας υποθέσουμε ότι έχετε υποβάλλει όλες τις αλλαγές σας, ώστε να μπορέσετε να επιστρέψετε στον κλάδο `master`:

[source,console]
----
$ git checkout master
Switched to branch 'master'
----

Σε αυτό το σημείο, ο κατάλογος εργασίας του έργου σας βρίσκεται ακριβώς στην κατάσταση στην οποία βρισκόταν πριν ξεκινήσετε να δουλεύετε για το πρόβλημα #53 και μπορείτε να συγκεντρωθείτε στο hotfix.
Αυτό είναι ένα σημαντικό σημείο που αξίζει να θυμάστε: όταν μεταβαίνετε από έναν κλάδο σε έναν άλλο, το Git επαναφέρει τον κατάλογο εργασίας στην κατάσταση που είχε την τελευταία φορά που είχατε κάνει κάποια υποβολή (commit) σε αυτό τον κλάδο. 
Προσθέτει, διαγράφει και τροποποιεί αρχεία αυτόματα ώστε να βεβαιωθεί ότι το αντίγραφο εργασίας σας είναι ίδιο με την κατάσταση του κλάδου αμέσως μετά την τελευταία υποβολή σε αυτό τον κλάδο.

Στη συνέχεια, πρέπει να δουλέψετε για το hotfix. 
Ας φτιάξουμε έναν κλάδο `hotfix` στον οποίο θα εργαστείτε:

[source,console]
----
$ git checkout -b hotfix
Switched to a new branch 'hotfix'
$ vim index.html
$ git commit -a -m 'Fix broken email address'
[hotfix 1fb7853] Fix broken email address
 1 file changed, 2 insertions(+)
----

.Κλάδος `hotfix` που βασίζεται στον κλάδο `master`.
image::images/basic-branching-4.png[Κλάδος `hotfix` που βασίζεται στον κλάδο `master`.]

Τώρα μπορείτε να κάνετε τα τεστ σας, να βεβαιωθείτε ότι ο κώδικάς σας κάνει αυτό που θέλετε, να τον συγχωνεύσετε με τον κλάδο `master` και να τον προωθήσετε στην παραγωγή.
Το τελευταίο το κάνετε με την εντολή `git merge`:(((εντολές git, merge)))

[source,console]
----
$ git checkout master
$ git merge hotfix
Updating f42c576..3a0874c
Fast-forward
 index.html | 2 ++
 1 file changed, 2 insertions(+)
----

Σε αυτή τη συγχώνευση υπάρχει η έκφραση "`fast-forward`".
Επειδή η υποβολή `C4` στον οποίο έδειχνε ο κλάδος `hotfix` τον οποίο συγχωνεύσατε ήταν ακριβώς μπροστά από την υποβολή `C2` στην οποία είστε, το Git απλά μετακίνησε τον δείκτη προς τα εμπρός. 
Με άλλα λόγια όταν προσπαθείτε να συγχωνεύσετε μία υποβολή με μία άλλη υποβολή στην οποία μπορείτε να φτάσετε ακολουθώντας το ιστορικό της πρώτης, το Git απλοποιεί τη διαδικασία μετακινώντας τον δείκτη σε εκείνο το σημείο, διότι δεν υπάρχει άλλη αποκλίνουσα εργασία που θα πρέπει να συγχωνευτεί -- αυτό ονομάζεται "`ταχυπροώθηση`" ("`fast-forward`").

Η αλλαγή σας τώρα υπάρχει στο στιγμιότυπο της υποβολής στην οποία δείχνει ο κλάδος `master` και μπορείτε να δημοσιεύσετε τη διόρθωσή σας.

.Ο κλάδος `master` ταχυπροωθήθηκε στον κλάδο `hotfix`.
image::images/basic-branching-5.png[Ο κλάδος `master` ταχυπροωθήθηκε στον κλάδο `hotfix`.]

Αφού ο σημαντικότατος διορθωτικός σας κώδικας έχει δημοσιευτεί, είστε έτοιμοι να επανέλθετε στην εργασία την οποία κάνατε πριν σας διακόψει το τηλεφώνημα.
Προτού όμως συνεχίσετε, θα διαγράψετε τον κλάδο `hotfix`, διότι δεν τον χρειάζεστε πλέον -- ο κλάδος `master` δείχνει ακριβώς στην ίδια θέση.
Μπορείτε να τον διαγράψετε με την επιλογή `-d` στην εντολή `git branch`:

[source,console]
----
$ git branch -d hotfix
Deleted branch hotfix (3a0874c).
----

Τώρα μπορείτε να επιστρέψετε στον κλάδο εργασίας του προβλήματος #53 και να συνεχίσετε να δουλεύετε σ' αυτό.

[source,console]
----
$ git checkout iss53
Switched to branch "iss53"
$ vim index.html
$ git commit -a -m 'Finish the new footer [issue 53]'
[iss53 ad82d7a] Finish the new footer [issue 53]
1 file changed, 1 insertion(+)
----

.Η εργασία συνεχίζει στον κλάδο `iss53`.
image::images/basic-branching-6.png[Η εργασία συνεχίζει στον κλάδο `iss53`.]

Σε αυτό το σημείο αξίζει να σημειωθεί ότι οι αλλαγές που κάνατε στον κλάδο `hotfix` δεν περιέχονται στα αρχεία του κλάδου `iss53`.
Αν θέλετε να τα ενσωματώσετε, μπορείτε να συγχωνεύσετε τον κλάδο `master` στον κλάδο `iss53` τρέχοντας την εντολή `git merge master` ή μπορείτε να αναβάλετε την ενσωμάτωση αυτών των αλλαγών μέχρι να αποφασίσετε να ξαναβάλετε τον κλάδο `iss53` μέσα στον κλάδο `master` αργότερα.

[[r_basic_merging]]
==== Συγχωνεύσεις -- τα βασικά

(((κλάδοι, συγχώνευση)))(((συγχώνευση)))(((branches, merging)))(((merging)))
Ας υποθέσουμε τώρα ότι έχετε αποφασίσει ότι η εργασία σας για το πρόβλημα #53 έχει ολοκληρωθεί και είναι έτοιμη να συγχωνευτεί στον κλάδο `master`.
Για να το κάνετε αυτό, αρκεί να συγχωνεύσετε τον κλάδο `iss53` στον κλάδο `master`, λίγο-πολύ με τον ίδιο τρόπο που συγχωνεύσατε τον κλάδο `hotfix` προηγουμένως.
Το μόνο που έχετε να κάνετε είναι να μεταβείτε στον κλάδο στον οποίο θέλετε να ενσωματώσετε τον άλλο κλάδο και να τρέξετε την εντολή `git merge`:

[source,console]
----
$ git checkout master
Switched to branch 'master'
$ git merge iss53
Merge made by the 'recursive' strategy.
index.html |    1 +
1 file changed, 1 insertion(+)
----

Το μήνυμα στην οθόνη διαφέρει λίγο από εκείνο που πήρατε όταν συγχωνεύσατε τον κλάδο `hotfix` προηγουμένως.
Σε αυτή την περίπτωση, το ιστορικό των αλλαγών απέκλινε σε κάποιο παλιότερο σημείο.
Επειδή η υποβολή στον κλάδο στον οποίο βρίσκεστε δεν είναι άμεσος πρόγονος του κλάδου τον οποίο ενσωματώνετε, το Git πρέπει να κάνει λίγη δουλίτσα.
Σε αυτή την περίπτωση, το Git κάνει μία απλή _τριμερή_ συγχώνευση, χρησιμοποιώντας τα στιγμιότυπα στο τέλος του κάθε κλάδου και τον κοινό πρόγονο των δύο.

.Τρία στιγμιότυπα που χρησιμοποιούνται σε μία τυπική συγχώνευση.
image::images/basic-merging-1.png[Τρία στιγμιότυπα που χρησιμοποιούνται σε μία τυπική συγχώνευση.]

Αντί, λοιπόν, το Git να μετακινήσει τον δείκτη του κλάδου προς τα εμπρός, δημιουργεί ένα νέο στιγμιότυπο που προκύπτει από αυτή την τριμερή συγχώνευση και αυτομάτως δημιουργεί μία νέα υποβολή που δείχνει σε αυτό το στιγμιότυπο.
Αυτό ονομάζεται _υποβολή συγχώνευσης_ (merge commit) και έχει την ιδιαιτερότητα ότι έχει περισσότερους από έναν γονείς.

.Μία υποβολή συγχώνευσης.
image::images/basic-merging-2.png[Μία υποβολή συγχώνευσης.]

Τώρα που η εργασία σας έχει συγχωνευτεί, δεν χρειάζεστε πλέον τον κλάδο `iss53`.
Μπορείτε να κλείσετε το ζήτημα στο σύστημα παρακολούθησης προβλημάτων σας και να διαγράψετε τον κλάδο:

[source,console]
----
$ git branch -d iss53
----

[[r_basic_merge_conflicts]]
==== Συγκρούσεις συγχωνεύσεων -- τα βασικά

(((συγχώνευση, συγκρούσεις)))(((merging, conflicts)))
Ενίοτε, η διαδικασία συγχώνευσης δεν εξελίσσεται τόσο ομαλά.
Αν έχετε τροποποιήσει το ίδιο σημείο του ίδιου αρχείου με διαφορετικό τρόπο στους δύο κλάδους που συγχωνεύετε, το Git δεν θα μπορέσει να τους συγχωνεύσει παστρικά.
Αν η λύση σας για το πρόβλημα #53 και η λύση σας για το επείγον πρόβλημα τροποποίησαν το ίδιο τμήμα ενός αρχείου, θα πάρετε ένα μήνυμα _σύγκρουσης συγχώνευσης_ περίπου σαν το παρακάτω:

[source,console]
----
$ git merge iss53
Auto-merging index.html
CONFLICT (content): Merge conflict in index.html
Automatic merge failed; fix conflicts and then commit the result.
----

Το Git δεν μπόρεσε να δημιουργήσει αυτόματα μία νέα υποβολή συγχώνευσης.
Διέκοψε τη διαδικασία, ώστε να επιλύσετε τη σύγκρουση.
Αν θέλετε να δείτε ποια αρχεία δεν έχουν συγχωνευτεί σε οποιοδήπτε σημείο μετά από μία σύγκρουση συγχώνευσης, τρέχετε την εντολή `git status`:

[source,console]
----
$ git status
On branch master
You have unmerged paths.
  (fix conflicts and run "git commit")

Unmerged paths:
  (use "git add <file>..." to mark resolution)

    both modified:      index.html

no changes added to commit (use "git add" and/or "git commit -a")
----

Οτιδήποτε εμπλέκεται σε σύγκρουση συγχώνευσης και δεν έχει επιλυθεί καταγράφεται ως unmerged.
Το Git προσθέτει τυποποιημένους σημειωτές "`επίλυσης σύγκρουσης`" στα αρχεία που εμπλέκονται σε συγκρούσεις, ώστε να τα ανοίξετε και να επιλύσετε αυτές τις διαφορές. 
Το αρχείο σας θα περιέχει ένα τμήμα που θα φαίνεται κάπως έτσι:

[source,html]
----
<<<<<<< HEAD:index.html
<div id="footer">contact : email.support@github.com</div>
=======
<div id="footer">
 please contact us at support@github.com
</div>
>>>>>>> iss53:index.html
----

Αυτό σημαίνει πως η έκδοση στο `HEAD` (δηλαδή το `master` κλάδο, γιατί σε αυτόν ήσασταν όταν τρέξατε στην εντολή συγχώνευσης) είναι το πάνω μέρος του μπλόκ (οτιδήποτε πάνω από `=======`), ενώ η έκδοση του κλάδου `iss53` είναι ότι φαίνεται στο κάτω μέρος του μπλόκ.
Προκειμένου να επιλύσετε τη σύγκρουση, πρέπει είτε να επιλέξετε τη μία ή την άλλη έκδοση είτε να συγχωνεύσετε τα περιεχόμενα οι ίδιοι.
Για παράδειγμα, μπορεί να θέλετε να επιλύσετε αυτή τη σύγκρουση αντικαθιστώντας ολόκληρο το τμήμα με το παρακάτω:

[source,html]
----
<div id="footer">
please contact us at email.support@github.com
</div>
----

Αυτή η επίλυση της σύγκρουσης περιέχει λίγο από κάθε τμήμα και οι γραμμές που περιέχουν τα `<<<<<<<`, `=======` και `>>>>>>>` έχουν αφαιρεθεί εντελώς.
Αφού έχετε επιλύσει όλα τα τμήματα σε κάθε αρχείο που εμπλέκεται σε σύγκρουση, τρέχετε `git add` σε καθένα από αυτά τα αρχεία, ώστε να επισημανθεί ως επιλυμένο.
Αν το αρχείο περάσει στον προθάλαμο, αυτό σημαίνει ότι έχει επιλυθεί.

Αν θέλετε αν χρησιμοποιήσετε κάποιο γραφικό εργαλείο για να επιλύσετε αυτές τις συγκρούσεις, τρέξτε `git mergetool` για να εκκινήσετε ένα κατάλληλο γραφικό εργαλείο συγχώνευσης που σας καθοδηγεί κατά την επίλυση των συγκρούσεων:(((εντολές git, mergetool)))

[source,console]
----
$ git mergetool

This message is displayed because 'merge.tool' is not configured.
See 'git mergetool --tool-help' or 'git help config' for more details.
'git mergetool' will now attempt to use one of the following tools:
opendiff kdiff3 tkdiff xxdiff meld tortoisemerge gvimdiff diffuse diffmerge ecmerge p4merge araxis bc3 codecompare vimdiff emerge
Merging:
index.html

Normal merge conflict for 'index.html':
  {local}: modified file
  {remote}: modified file
Hit return to start merge resolution tool (opendiff):
----

Αν θέλετε να χρησιμοποιήσετε κάποιο εργαλείο συγχώνευσης διαφορετικό από το προεπιλεγμένο (το Git επέλεξε το `opendiff` σε αυτή την περίπτωση, διότι εκτελέσαμε την εντολή σε Mac), μπορείτε να δείτε όλα τα εργαλεία που υποστηρίζονται στο πάνω μέρος μετά από το "`one of the following tools.`"
Απλά γράψτε το όνομα του εργαλείου που προτιμάτε.

[NOTE]
====
Αν χρειάζεστε πιο προχωρημένα εργαλεία για να επιλύετε περίπλοκες συγκρούσεις συγχωνεύσεων, θα μιλήσουμε σχετικά στην ενότητα <<ch07-git-tools#r_advanced_merging>>.
====

Αφού βγείτε από το εργαλείο συγχώνευσης, το Git σάς ρωτάει αν η συγχώνευση ήταν επιτυχής.
Αν του πείτε ότι ήταν, ωθεί το αρχείο στον προθάλαμο ώστε να επισημανθεί ως επιλυμένο.
Μπορείτε να τρέξετε την εντολή `git status` ξανά για να επιβεβαιώσετε ότι όλες οι συγκρούσεις έχουν επιλυθεί:

[source,console]
----
$ git status
On branch master
All conflicts fixed but you are still merging.
  (use "git commit" to conclude merge)

Changes to be committed:

    modified:   index.html
----

Αν είστε ευχαριστημένοι με το αποτέλεσμα και επιβεβαιώσετε ότι όλα τα αρχεία που εμπλέκονται σε συγκρούσεις έχουν τοποθετηθεί στον προθάλαμο, μπορείτε να πληκτρολογήσετε `git commit` για να οριστικοποιήσετε την υποβολή συγχώνευσης.
Το μήνυμα υποβολής είναι εξ ορισμού κάπως έτσι:

[source,console]
----
Merge branch 'iss53'

Conflicts:
    index.html
#
# It looks like you may be committing a merge.
# If this is not correct, please remove the file
#	.git/MERGE_HEAD
# and try again.


# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# All conflicts fixed but you are still merging.
#
# Changes to be committed:
#	modified:   index.html
#
----

Εφόσον θεωρείτε ότι θα είναι χρήσιμο σε όσους δουν αυτή τη συγχώνευση στο μέλλον, μπορείτε να τροποποιήσετε αυτό το μήνυμα με λεπτομέρειες σχετικά με το πώς επιλύσατε τη συγχώνευση και να εξηγήσετε γιατί κάνατε ό,τι κάνατε, εφόσον δεν είναι προφανές.
