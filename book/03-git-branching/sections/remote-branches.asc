[[r_remote_branches]]
=== Απομακρυσμένοι κλάδοι

(((κλάδοι, απομακρυσμένοι)))(((αναφορές, απομακρυσμένες)))
Οι απομακρυσμένες αναφορές είναι αναφορές (δείκτες) που βρίσκονται στα απομακρυσμένα αποθετήριά σας και  συμπεριλαμβάνουν κλάδους, ετικέτες και ούτω καθεξής.
Μπορείτε να πάρετε μία πλήρη λίστα των απομακρυσμένων αναφορών με την εντολή `git ls-remote <απομακρυσμένο-αποθετήριο>` ή `git remote show <απομακρυσμένο-αποθετήριο>` για απομακρυσμένους κλάδους καθώς και άλλες πληροφορίες.
Παρόλα αυτά, ένας πιο συνηθισμένος τρόπος είναι να εκμεταλλευτείτε τους κλάδους απομακρυσμένης παρακολούθησης (remote-tracking branches).

Οι κλάδοι απομακρυσμένης παρακολούθησης είναι αναφορές στην κατάσταση απομακρυσμένων κλάδων.
Είναι τοπικές αναφορές τις οποίες δεν μπορείτε να μετακινήσετε· μετακινούνται αυτόματα όποτε υπάρχει κάποια δικτυακή επικοινωνία, ώστε να διασφαλίζεται η ακριβής αναπαράσταση της κατάστασης του απομακρυσμένου αποθετηρίου.
Μπορείτε να τους σκέφτεστε ως σελιδοδείκτες που σας θυμίζουν πού βρίσκονταν οι κλάδοι στα απομακρυσμένα αποθετήριά σας την τελευταία φορά που είχατε συνδεθεί σε αυτά.

Έχουν τη μορφή `<απομακρυσμένο-αποθετήριο>/<κλάδος>`.
Για παράδειγμα, αν θέλετε να δείτε σε ποια κατάσταση ήταν ο κλάδος `master` στο απομακρυσμένο αποθετήριό σας `origin` την τελευταία φορά που επικοινωνήσατε μαζί του, θα πρέπει να μεταβείτε στον κλάδο `origin/master`.
Αν δουλεύατε σε ένα θέμα με κάποιον συνεργάτη και αυτός είχε ωθήσει έναν κλάδο `iss53`, ενδεχομένως είχατε κι εσείς έναν δικό σας τοπικό κλάδο `iss53`, αλλά ο κλάδος στον διακομιστή θα αναπαρίστατο με τον κλάδο απομακρυσμένης παρακολούθησης `origin/iss53`.

Ίσως όλα αυτά φαίνονται συγκεχυμένα, οπότε ας ξεμπερδέψουμε με ένα παράδειγμα. 
Ας υποθέσουμε ότι έχετε έναν διακομιστή Git στο δίκτυό σας στη διεύθυνση `git.ourcompany.com`.
Αν τον κλωνοποιήσετε, η εντολή `clone` του Git θα τον ονομάσει `origin`, θα τραβήξει όλα τα δεδομένα και θα δημιουργήσει έναν δείκτη που δείχνει εκεί όπου βρίσκεται ο κλάδος του `master` και θα τον ονομάσει τοπικά `origin/master`.
Το Git επίσης θα δημιουργήσει έναν τοπικό κλάδο `master` για εσάς, ώστε να έχετε έναν κλάδο στον οποίο μπορείτε να δουλέψετε. Αυτός ο κλάδος ξεκινά από το ίδιο σημείο από όπου ξεκινά και ο κλάδος `master` του αποθετηρίου `origin`.

[NOTE]
====
.Το αποθετήριο "`origin`" δεν είναι κάτι ιδιαίτερο
Ακριβώς όπως το όνομα κλάδου "`master`" δεν έχει κάποια ιδιαίτερη σημασία στο Git, το ίδιο συμβαίνει και με το όνομα κλάδου "`origin`".
Ενώ "`master`" είναι το προεπιλεγμένο όνομα για τον αρχικό κλάδο όταν τρέχετε την εντολή `git init` (που είναι και ο μόνος λόγος για τον οποίο χρησιμοποιείται τόσο ευρέως), "`origin`" είναι το προεπιλεγμένο όνομα για ένα απομακρυσμένο αποθετήριο όταν τρέχετε `git clone`.
Αν τρέξετε `git clone -o booyah` τότε θα έχετε ως προεπιλεγμένο απομακρυσμένο κλάδο τον `booyah/master`.(((origin)))
====

.Τοπικά και απομακρυσμένα αποθετήρια μετά την κλωνοποίηση.
image::images/remote-branches-1.png[Τοπικά και απομακρυσμένα αποθετήρια μετά την κλωνοποίηση.]

Αν κάνετε λίγη δουλίτσα στον τοπικό σας κλάδο `master` και στο μεταξύ κάποιος άλλος ωθήσει στο `git.ourcompany.com` και ενημερώσει τον κλάδο `master`, τότε τα δύο ιστορικά θα προχωρήσουν διαφορετικά.
Επιπλέον, για όσο χρονικό διάστημε δεν είστε συνδεδεμένοι με τον διακομιστή `origin`, ο δείκτης σας `origin/master` δεν μετακινείται.

.Η τοπική και απομακρυσμένη δουλειά μπορεί να αποκλίνουν.
image::images/remote-branches-2.png[Η τοπική και απομακρυσμένη δουλειά μπορεί να αποκλίνουν.]

Για να συγχρονίσετε τη δουλειά σας με κάποιο απομακρυσμένο αποθετήριο, τρέχετε την εντολή `git fetch <απομακρυσμένο-αποθετήριο>` (στην περίπτωσή μας `git fetch <origin>`).
Αυτή η εντολή αναζητά ποιος διακομιστής είναι ο "`origin`" (στη συγκεκριμένη περίπτωση είναι ο `git.ourcompany.com`), ανακτά (fetch) από αυτόν ό,τι δεδομένα δεν έχετε ακόμα και ενημερώνει την τοπική βάση δεδομένων σας, μετακινώντας τον δείκτη `origin/master` στη νέα του πιο ενημερωμένη θέση.

.Η εντολή `git fetch` ενημερώνει τους κλάδους απομακρυσμένης παρακολούθησης.
image::images/remote-branches-3.png[Η εντολή `git fetch` ενημερώνει τους κλάδους απομακρυσμένης παρακολούθησης.]

Για να δείξουμε τι συμβαίνει όταν έχετε πολλούς απομακρυσμένους διακομιστές και με τι μοιάζουν οι απομακρυσμένοι κλάδοι των απομακρυσμένων έργων, ας υποθέσουμε ότι έχετε ένα άλλο εσωτερικό διακομιστή Git που χρησιμοποιείται μόνον για ανάπτυξη κώδικα από μία συγκεκριμένη ομάδα.
Αυτός ο διακομιστής βρίσκεται στη διεύθυνση `git.team1.ourcompany.com`.
Μπορείτε να τον προσθέσετε στο έργο στο οποίο δουλεύετε ως μία νέα απομακρυσμένη αναφορά εκτελώντας την εντολή `git remote add` όπως εξηγήσαμε στο κεφάλαιο <<ch02-git-basics#ch02-git-basics>>.
Ονομάστε αυτό τον απομακρυσμένο διακομιστή `teamone`, που θα είναι και το σύντομο όνομα του παραπάνω URL.

.Προσθήκη ενός επιπλέον απομακρυσμένου διακομιστή.
image::images/remote-branches-4.png[Προσθήκη ενός επιπλέον απομακρυσμένου διακομιστή.]

Τώρα μπορείτε να τρέξετε την εντολή `git fetch teamone` για να ανακτήσετε οτιδήποτε ο απομακρυσμένος διακομιστής `teamone` έχει που δεν το έχετε ακόμα εσείς.
Επειδή ο διακομιστής έχει ένα υποσύνολο από τα δεδομένα που έχει ο διακομιστής `origin` αυτή τη στιγμή, το Git δεν ανακτά δεδομένα, αλλά τοποθετεί έναν κλάδο απομακρυσμένης παρακολούθησης με όνομα `teamone/master` να δείχνει στην υποβολή που έχει ο `teamone` στον δικό του κλάδο `master`.

.Κλάδος απομακρυσμένης παρακολούθησης για τον κλάδο `teamone/master`.
image::images/remote-branches-5.png[Κλάδος απομακρυσμένης παρακολούθησης για τον κλάδο `teamone/master`.]

[[r_pushing_branches]]
==== Ωθήσεις

(((ώθηση)))(((pushing)))
Όταν θέλετε να μοιραστείτε έναν κλάδο με τον υπόλοιπο κόσμο, πρέπει να τον ωθήσετε σε έναν απομακρυσμένο διακομιστή στον οποίο έχετε δικαίωμα εγγραφής (write access).
Οι τοπικοί σας κλάδοι δεν συγχρονίζονται αυτόματα με τους απομακρυσμένους διακομιστές στους οποίους έχετε δικαίωμα να αποθηκεύετε -- πρέπει να ωθήσετε χειροκίνητα τους κλάδους που θέλετε να κοινοποιήσετε σε άλλους.
Με αυτό τον τρόπο, μπορείτε να χρησιμοποιείτε ιδιωτικούς κλάδους για δουλειά που δεν θέλετε να μοιραστείτε με άλλους και να ωθείτε μόνον τους θεματικούς κλάδους στους οποίους θέλετε να συνεργαστείτε.

Αν έχετε έναν κλάδο με όνομα `serverfix` στον οποίο θέλετε να δουλέψετε με άλλους, μπορείτε να τον ωθήσετε με τον ίδιο τρόπο που ωθήσατε τον πρώτο σας κλάδο.
Τρέχετε την εντολή `git push <απομακρυσμένο-αποθετήριο> <κλάδος>`:(((εντολές git, push)))

[source,console]
----
$ git push origin serverfix
Counting objects: 24, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (15/15), done.
Writing objects: 100% (24/24), 1.91 KiB | 0 bytes/s, done.
Total 24 (delta 2), reused 0 (delta 0)
To https://github.com/schacon/simplegit
 * [new branch]      serverfix -> serverfix
----

Στην πραγματικότητα αυτή η εντολή είναι μία συντόμευση.
Το Git αναπτύσσει αυτόματα το όνομα κλάδου `serverfix` σε `refs/heads/serverfix:refs/heads/serverfix`, που σημαίνει "`Πάρε τον τοπικό μου κλάδο `serverfix` και ώθησέ τον ώστε να ενημερωθεί ο αντίστοιχος κλάδος `serverfix` του απομακρυσμένου διακομιστή`".
Θα δείτε πιο λεπτομερώς το κομμάτι `refs/heads/` στην ενότητα <<ch10-git-internals#ch10-git-internals>>· προς το παρόν μπορείτε να το αγνοήσετε.
Επίσης μπορείτε να τρέξετε την εντολή `git push origin serverfix:serverfix`, που κάνει ακριβώς το ίδιο πράγμα -- λέει, "`Πάρε το δικό μου `serverfix` και κάντον το `serverfix` του απομακρυσμένου διακομιστή`".
Χρησιμοποιείτε αυτή την εντολή για να ωθήσετε έναν τοπικό κλάδο σε έναν απομακρυσμένο που έχει διαφορετικό όνομα.
Αν δεν θέλατε να ονομάζεται `serverfix` στο απομακρυσμένο αποθετήριο, τότε μπορείτε να τρέξετε την εντολή `git push origin serverfix:awesomebranch` ώστε να ωθήσετε τον τοπικό σας κλάδο `serverfix` στον κλάδο με όνομα `awesomebranch` στο απομακρυσμένο αποθετήριο.

[NOTE]
.Δεν χρειάζεται να γράφετε τον κωδικό πρόσβασής σας κάθε φορά.
====
Αν θέλετε να ωθήσετε κάτι σε ένα URL με HTTPS, ο διακομιστής Git θα σας ζητήσει το όνομα χρήστη και τον κωδικό σας για ταυτοποίηση.
Η προεπιλεγμένη ρύθμιση είναι να σας ζητήσει αυτή την πληροφορία στο τερματικό, ώστε ο διακομιστής να αποφανθεί αν έχετε το δικαίωμα να ωθήσετε αλλαγές.

Αν δεν θέλετε να πλκτρολογείτε τον κωδικό πρόσβασής σας κάθε φορά που ωθείτε κάτι, μπορείτε να ορίσετε μία "`προσωρινή μνήμη διαπιστευτηρίων`" ("`credential cache`").
Ο πιο απλός τρόπος είναι να παραμένουν στη μνήμη για μερικά λεπτά, κάτι που μπορεί να οριστεί εύκολα με την εντολή `git config --global credential.helper cache`.

Περισσότερες πληροφορίες σχετικά με τις διάφορες επιλογές προσωρινής αποθήκευσης διαπιστευτηρίων βλ. <<ch07-git-tools#r_credential_caching>>.
====

Την επόμενη φορά που κάποιος από τους συνεργάτες σας ανακτήσει δεδομένα από τον διακομιστή, θα πάρει μία αναφορά που θα δείχνει εκεί όπου βρίσκεται ο κλάδος `serverfix` του διακομιστή, δηλαδή κάτω από τον απομακρυσμένο κλάδο `origin/serverfix`:

[source,console]
----
$ git fetch origin
remote: Counting objects: 7, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 0), reused 3 (delta 0)
Unpacking objects: 100% (3/3), done.
From https://github.com/schacon/simplegit
 * [new branch]      serverfix    -> origin/serverfix
----

Είναι σημαντικό να σημειώσουμε πως όταν εκτελείτε μία εντολή `git fetch`, που φέρνει νέους κλάδους απομακρυσμένης παρακολούθησης στον υπολογιστή σας, δεν έχετε αυτόματα τοπικά επεξεργάσιμα αρχεία. 
Με άλλα λόγια, σε αυτή την περίπτωση, δεν έχετε έναν νέο κλάδο `serverfix` -- έχετε μόνον έναν δείκτη στον `origin/serverfix` που δεν μπορείτε να τροποποιήσετε.

Για να συγχωνεύσετε αυτή τη δουλειά στον τρέχοντα κλάδο εργασίας σας, μπορείτε να τρέξετε την εντολή `git merge origin/serverfix`.
Αν θέλετε τον δικό σας κλάδο `serverfix` στον οποίο μπορείτε να εργαστείτε, μπορείτε να τον βασίσετε στον κλάδο απομακρυσμένης παρακολούθησης:

[source,console]
----
$ git checkout -b serverfix origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.
Switched to a new branch 'serverfix'
----

Η παραπάνω εντολή σας δίνει έναν τοπικό κλάδο στον οποίο μπορείτε να δουλέψετε και ο οποίος ξεκινά από εκείνο το σημείο στο οποίο βρίσκεται ο κλάδος `origin/serverfix`.

[[r_tracking_branches]]
==== Παρακολούθηση κλάδων

(((κλάδοι, παρακολούθηση)))(((κλάδοι, upstream)))
Όταν κάνετε checkout έναν τοπικό κλάδο από έναν κλάδο απομακρυσμένης παρακολούθησης, αυτόματα δημιουργείται ένας "`κλάδος παρακολούθησης`" (και ο κλάδος που παρακολουθείται ονομάζεται "`κλάδος upstream`").
Οι κλάδοι παρακολούθησης είναι τοπικοί κλάδοι που σχετίζονται άμεσα με κάποιο απομακρυσμένο κλάδο.
Αν είστε σε έναν κλάδο παρακολούθησης και πληκτρολογήσετε `git pull`, το Git αυτόματα γνωρίζει από ποιον διακομιστή να ανακτήσει και σε ποιον κλάδο να συγχωνεύσει.

Όταν κλωνοποιείτε ένα αποθετήριο, αυτό δημιουργεί αυτόματα έναν κλάδο `master` που παρακολουθεί τον κλάδο `origin/master`.
Όμως μπορείτε να ορίσετε και άλλους κλάδους παρακολούθησης, αν θέλετε -- κλάδους που παρακολουθούν κλάδους σε άλλα απομακρυσμένα αποθετήρια ή δεν παρακολουθούν τον κλάδο `master`.
Η πιο απλή περίπτωση είναι αυτή που μόλις είδατε, η εντολή `git checkout -b <κλάδος> <απομακρυσμένο-αποθετήριο>/<κλάδος>`.
Αυτή η περίπτωση είναι τόσο συνηθισμένη που το Git σάς παρέχει την επιλογή `--track`:

[source,console]
----
$ git checkout --track origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.
Switched to a new branch 'serverfix'
----

Μάλιστα, είναι τόσο συνηθισμένη που υπάρχει συντόμευση για την παραπάνω επιλογή. 
Αν το όνομα του κλάδου στον οποίο προσπαθείτε να μεταβείτε (α) δεν υπάρχει και (β) έχει το ίδιο όνομα με μόνο έναν απομακρυσμένο, το Git θα δημιουργήσει αυτόματα έναν κλάδο παρακολούθησης.

[source,console]
----
$ git checkout serverfix
Branch serverfix set up to track remote branch serverfix from origin.
Switched to a new branch 'serverfix'
----

Για να ορίσετε έναν τοπικό κλάδο με διαφορετικό όνομα από αυτό του απομακρυσμένου κλάδου, μπορείτε εύκολα να χρησιμοποιήσετε την πρώτη εκδοχή με διαφορετικό όνομα τοπικού κλάδου:

[source,console]
----
$ git checkout -b sf origin/serverfix
Branch sf set up to track remote branch serverfix from origin.
Switched to a new branch 'sf'
----

Τώρα ο τοπικός σας κλάδος `sf` θα τραβά αυτόματα από τον κλάδο `origin/serverfix`.

Αν έχετε ήδη έναν τοπικό κλάδο και θέλετε να τον συνδέσετε με έναν απομακρυσμένο κλάδο που μόλις τραβήξατε ή θέλετε να αλλάξετε τον κλάδο upstream που παρακολουθείτε, μπορείτε να χρησιμοποιήσετε την επιλογή `-u` ή `--set-upstream-to` με την εντολή `git branch` ώστε να τον συνδέσετε οποιαδήποτε στιγμή.

[source,console]
----
$ git branch -u origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.
----

[NOTE]
.Συντόμευση upstream
====
Όταν έχετε ορίσει έναν κλάδο παρακολούθησης, μπορείτε να αναφέρεστε σε αυτόν ως `@{upstream}` ή με τη συντομογραφία `@{u}`.
Άρα αν είστε στον κλάδο `master` και αυτός παρακολουθεί τον `origin/master`, μπορείτε να πείτε κάτι σαν `git merge @{u}` αντί για `git merge origin/master`, αν θέλετε.(((@{u})))(((@{upstream})))
====

Αν θέλετε να δείτε ποιους κλάδους παρακολούθησης έχετε ορίσει, μπορείτε να χρησιμοποιήσετε την επιλογή `-vv` στην εντολή `git branch`.
Αυτή θα παραθέσει όλους τους τοπικούς κλάδους με περισσότερες πληροφορίες, όπως ποιον κλάδο παρακολουθεί κάθε κλάδος και αν ο τοπικός σας κλάδος προηγείται ή υστερεί σε σχέση με τον απομακρυσμένο κλάδο ή και τα δύο.

[source,console]
----
$ git branch -vv
  iss53     7e424c3 [origin/iss53: ahead 2] forgot the brackets
  master    1ae2a45 [origin/master] deploying index fix
* serverfix f8674d9 [teamone/server-fix-good: ahead 3, behind 1] this should do it
  testing   5ea463a trying something new
----

Εδώ μπορείτε να δείτε ότι ο κλάδος μας `iss53` παρακολουθεί τον `origin/iss53` και "`προηγείται`" κατά δύο (ahead 2), δηλαδή έχετε κάνει δύο υποβολές τοπικά που δεν έχουν ωθηθεί στον διακομιστή. 
Επίσης μπορείτε να δείτε ότι ο τοπικός σας κλάδος `master` παρακολουθεί τον `origin/master` και είναι ενημερωμένος.
Στη συνέχεια βλέπουμε ότι ο κλάδος σας `serverfix` παρακολουθεί τον κλάδο `server-fix-good` στον διακομιστή `teamone` και προηγείται κατά τρεις και υστερεί κατά μία, που σημαίνει ότι υπάρχει μία υποβολή στον διακομιστή που δεν την έχετε συγχωνεύσει ακόμη και τρεις τοπικές υποβολές που δεν έχετε ωθήσει ακόμη.
Τέλος, βλέπετε ότι ο κλάδος σας `testing` δεν παρακολουθεί κανέναν απομακρυσμένο κλάδο.

Είναι σημαντικό να σημειώσουμε ότι αυτοί οι αριθμοί είναι οι υποβολές από την τελευταία φορά που ανακτήσατε (fetch) από τον κάθε διακομιστή.
Αυτή η εντολή δεν ρωτά τους διακομιστές, απλά σας λέει τι έχει ήδη αποθηκευμένο τοπικά από τους διακομιστές.
Αν θέλετε εντελώς ενημερωμένους αριθμούς υποβολών με τις οποίες προηγείται και υστερεί ο κλάδος σας, πρέπει να τρέξετε μία εντολή `fetch` προς όλους τους απομακρυσμένους πριν τρέξετε την παραπάνω εντολή.
Αυτό μπορείτε να το κάνετε ως εξής: 

[source,console]
----
$ git fetch --all; git branch -vv
----

==== Ελκυσμοί

(((ελκυσμός)))(((pulling)))
Ενώ η εντολή `git fetch` ανακτά όλες τις αλλαγές που δεν έχετε ήδη από τον διακομιστή, δεν θα αλλάξει τον κατάλογο εργασίας σας καθόλου.
Απλά θα πάρει τα δεδομένα και θα σας αφήσει να τα συγχωνεύσετε μόνοι σας.
Πάντως, υπάρχει η εντολή `git pull` η οποία ουσιαστικά στις περισσότερες περιπτώσεις είναι μία εντολή `git fetch` που ακολουθείται από μία εντολή `git merge`.
Αν έχετε ορίσει κάποιον κλάδο παρακολούθησης όπως σας δείξαμε στην προηγούμενη ενότητα, είτε με ρητό ορισμό είτε επειδή τον έχετε δημιουργήσει με τις εντολές `clone` ή `checkout`, η `git pull` θα αναζητήσει τον διακομιστή και κλάδο τον οποίο παρακολουθεί ο τρέχων κλάδος σας, θα ανακτήσει από τον διακομιστή και θα προσπαθήσει να συγχωνεύσει σε αυτό τον απομακρυσμένο κλάδο.

Γενικά είναι καλύτερα να χρησιμοποιείτε τις εντολές `fetch` και `merge` ξεχωριστά διότι τα μαγικά που κάνει η `git pull` μπορεί να σας μπερδέψουν.

[[r_delete_branches]]
==== Διαγραφή απομακρυσμένων κλάδων

(((κλάδοι, διαγραφή απομακρυσμένων)))
Ας υποθέσουμε ότι τελειώσατε με τον απομακρυσμένο κλάδο -- π.χ. οι συνεργάτες σας και εσείς τελειώσατε με ένα χαρακτηριστικό και το έχετε συγχωνεύσει στον κλάδο `master` του απομακρυσμένου αποθετηρίου (ή τέλος πάντων σε οποιονδήποτε κλάδο υπάρχει η ευσταθής έκδοσή του έργου σας).
Μπορείτε να διαγράψετε τον απομακρυσμένο κλάδο χρησιμοποιώντας την επιλογή `--delete` στην εντολή `git push`.
Αν θέλετε να διαγράψετε τον κλάδο `serverfix` από τον διακομιστή, τρέχετε τα παρακάτω:

[source,console]
----
$ git push origin --delete serverfix
To https://github.com/schacon/simplegit
 - [deleted]         serverfix
----

Βασικά αυτό που κάνει αυτή η εντολή είναι να απομακρύνει τον δείκτη από τον διακομιστή.
Ο διακομιστής Git γενικά θα διατηρήσει τα δεδομένα εκεί για λίγο καιρό, μέχρι να τρέξει μία διαδικασία συλλογής σκουπιδιών (garbage collection) ώστε αν ο κλάδος διαγράφηκε κατά λάθος, να είναι εύκολο να αποκατασταθεί.
