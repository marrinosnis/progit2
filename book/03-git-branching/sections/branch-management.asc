[[r_branch_management]]
=== Διαχείριση κλάδων

(((κλάδοι, διαχείριση)))
Τώρα που έχετε δημιουργήσει, συγχωνεύσει και διαγράψει μερικούς κλάδους, ας δείτε μερικά εργαλεία διαχείρισης κλάδων που θα σας είναι χρήσιμα όταν αρχίσετε να χρησιμοποιείτε κλάδους συχνότερα.

Η εντολή `git branch` εκτός από το να δημιουργεί και να διαγράφει κλάδους κάνει και κάποια άλλα πράγματα.(((εντολές git, branch)))
Αν την τρέξετε χωρίς ορίσματα, τότε παίρνετε μία λίστα όλων των κλάδων:

[source,console]
----
$ git branch
  iss53
* master
  testing
----

Ο χαρακτήρας `*` πριν από τον κλάδο `master` επισημαίνει ότι ο κλάδος αυτός είναι ο τρέχων κλάδος (δηλαδή ο κλάδος στον οποίο δείχνει ο δείκτης `HEAD`).
Αυτό σημαίνει ότι αν κάνετε μία υποβολή σε αυτό το σημείο, ο κλάδος `master` θα προχωρήσει ώστε να συμπεριλάβει τη δουλειά σας.
Για να δείτε την τελευταία υποβολή του κάθε κλάδου μπορείτε να τρέξετε την εντολή `git branch -v`:

[source,console]
----
$ git branch -v
  iss53   93b412c Fix javascript issue
* master  7a98805 Merge branch 'iss53'
  testing 782fd34 Add scott to the author list in the readme
----

Οι επιλογές `--merged` και `--no-merged` φιλτράρουν τη λίστα των κλάδων και δείχνουν μόνον όσους κλάδους έχουν συγχωνευτεί και αντίστοιχα δεν έχουν ακόμα συγχωνευτεί στον τρέχοντα κλάδο.
Για να δείτε ποιοι κλάδοι έχουν ήδη συγχωνευτεί στον τρέχοντα κλάδο, τρέχετε την εντολή `git branch --merged`:

[source,console]
----
$ git branch --merged
  iss53
* master
----

Επειδή είχατε ήδη συγχωνεύσει τον κλάδο `iss53` προηγουμένως, φαίνεται στη λίστα σας. 
Γενικά είναι ασφαλές να διαγράψετε τους κλάδους αυτής της λίστας που δεν έχουν το `*` χρησιμοποιώντας την εντολή `git branch -d`· έχετε ήδη ενσωματώσει τις αλλαγές τους σε κάποιον άλλο κλάδο, συνεπώς δεν πρόκειται να χάσετε τίποτα.

Για να δείτε όλους τους κλάδους που περιέχουν εργασία που δεν έχετε συγχωνεύσει σε κάποιον άλλο κλάδο ακόμα, μπορείτε να εκτελέσετε την εντολή `git branch --no-merged`:

[source,console]
----
$ git branch --no-merged
  testing
----

Αυτή δείχνει τον άλλο σας κλάδο.
Επειδή αυτός ο κλάδος περιέχει εργασία που δεν έχει ακόμα συγχωνευτεί σε κάποιον άλλο κλάδο, αν αποπειραθείτε να τον διαγράψετε με την εντολή `git branch -d` θα αποτύχετε:

[source,console]
----
$ git branch -d testing
error: The branch 'testing' is not fully merged.
If you are sure you want to delete it, run 'git branch -D testing'.
----

Αν πραγματικά θέλετε να διαγράψετε έναν τέτοιο κλάδο και να χάσετε τη δουλειά που περιέχει, μπορείτε να επιβάλετε τη διαγραφή με την επιλογή `-D`, όπως υποδεικνύει και το παραπάνω μήνυμα.

[TIP]
====
Εφόσον δεν δώσετε το όνομα μίας υποβολής ή ενός κλάδου οι επιλογές `--merged` και `--no-merged` θα σας δείξουν τι έχει ή δεν έχει συγχωνευτεί, αντίστοιχα, στον _τρέχοντα_ κλάδο σας.

Μπορείτε επίσης να δώσετε μία επιπρόσθετη παράμετρο για να ρωτήσετε την κατάσταση συγχώνευσης σε σχέση με κάποιον άλλο κλάδο χωρίς να έχετε μεταβεί σε αυτό τον κλάδο προηγουμένως. 
Για παράδειγμα, στο παρακάτω ρωτάμε, "`τι δεν έχει συγχωνευτεί στον κλάδο `master` ακόμα;`"
[source,console]
----
$ git checkout testing
$ git branch --no-merged master
  topicA
  featureB
----
====

==== Μετονομασία κλάδου

[CAUTION]
====
Μην μετονομάζετε κλάδους που χρησιμοποιούνται ακόμα από άλλους συνεργάτες.
Μην μετονομάζετε κλάδους όπως τους master/main/mainline χωρίς να έχετε διαβάσει την ενότητα <<_changing_master>>.
====

Ας υποθέσουμε ότι έχετε έναν κλάδο με το όνομα `bad-branch-name` και θέλετε να το αλλάξετε σε `corrected-branch-name`, διατηρώνταςα όλο το ιστορικό.
Επίσης θέλετε να αλλάξετε το όνομα του κλάδου στον απομακρυσμένο (GitHub, GitLab, ή άλλο)  διακομιστή.
Πώς μπορείτε να το κάνετε;

Μετονομάστε τον κλάδο τοπικά με την εντολή `git branch --move`:

[source, console]
----
$ git branch --move bad-branch-name corrected-branch-name
----

Η εντολή αυτή αντικαθιστά το `bad-branch-name` με το `corrected-branch-name`, αλλά αυτή η αλλαγή προς το παρόν έχει γίνει μόνο τοπικά.
Για να δουν και οι άλλοι τον διορθωμένο κλάδο, πρέπει να τον ωθήσετε:

[source,console]
----
$ git push --set-upstream origin corrected-branch-name
----

Ας δείτε τώρα που βρισκόμαστε:

[source, console]
----
$ git branch --all
* corrected-branch-name
  main
  remotes/origin/bad-branch-name
  remotes/origin/corrected-branch-name
  remotes/origin/main
----

Παρατηρήστε ότι βρίσκεστε στον κλάδο `corrected-branch-name` και ότι επιπλέον είναι διαθέσιμος και στον απομακρυσμένο διακομιστή.
Όμως και ο κλάδος με το προηγούμενο όνομα υπάρχει ακόμα στον απομακρυσμένο διακομιστή. 
Μπορείτε να τον διαγράψετε εκτελώντας την ακόλουθη εντολη:

[source,console]
----
$ git push origin --delete bad-branch-name
----

Τώρα το παλιό όνομα κλάδου έχει αντικαταστεθί πλήρως από το διορθωμένο όνομα.

[[_changing_master]]
===== Αλλαγή του ονόματος του κύριου κλάδου

[WARNING]
====
Η μετονομασία των κλάδων όπως οι master/main/mainline/default θα διακόψει την αφομοίωση, τις υπηρεσίες, τα βοηθητικά προγράμματα και τα script μεγαλώττισης που χρησιμοποιεί το αποθετήριό σας. .
Πριν το κάνετε, οπωσδήποτ μιλήστε με τους συνεργάτες σας.
Επίσης, κάντε μια ενδελεχή αναζήτηση στο αποθετήριό σας και ενημερώστε αναφορές στο παλιό όνομα του κύριου κλάδου σας στον κώδικα και τα script σας.
====

Μπορείτε να μετονομάσετε τον τοπικό σας κλάδο `master` σε `main` με την εξής εντολή:

[source,console]
----
$ git branch --move master main
----

Πλέον δεν υπάρχει τοπικός κλάδος `master`, διότι έχει μετονομαστεί σε `main`.

Για να δουν και οι άλλοι τον κλάδο `main`, πρέπει να τον ωθήσετε στον απομακρυσμένο διακομιστή.
Αυτό γίνεται με την εξής εντολή.

[source,console]
----
$ git push --set-upstream origin main
----

Έχετε καταλήξει στην ακόλουθη κατάσταση:

[source,console]
----
$ git branch --all
* main
  remotes/origin/HEAD -> origin/master
  remotes/origin/main
  remotes/origin/master
----

Ο τοπικός σας κλάδος `master` έχει εξαφανιστεί, αφού αντικαταστάθηκε από τον κλάδο `main`.
Ο κλάδος `main` υπάρχει στον απομακρυσμένο διακομιστή.
Όμως και ο κλάδος `master` υπάρχει ακόμα στον απομακρυσμένο διακομιστή.
Κάποιοι συνεργάτες σας θα συνεχίσουν να χρησιμοποιύν τον κλάδο `master` ως τον κύριο κλάδο τους, μέχρι να κάνετε μερικές ακόμα αλλαγές.

Πρέπει να κάνετε μερικά ακόμα πράγματα ώστε να ολοκληρώσετε τη μετάβαση:

* Όσα έργα εξαρτώνται από αυτό, θα πρέπει να ενημερώσουν τον κώδικά τους ή/και την παραμετροποίησή τους.
* Ενημερώστε όποια αρχεία παραμετροποίησης test-runner έχετε.
* Προσαρμόστε τα script build και release.
* Ενημερώστε ρυθμίσεις στον διακομιστή του αποθετηρίου σας όσον αφορά στον προεπιλεγμένο κλάδο, τους κανόνες συγχώνευσης και ό,τι άλλο χρησιμοποιεί ονόματα κλάδων.
* Ενημερώστε αναφορές στον παλιό όνομα στην τεκμηρίωση.
* Κλείστε ή συγχωνεύστε όσα αιτήματα ελκυσμού έχουν ως στόχο τον παλιό κλάδο.

Αφού έχετε κάνει όλα αυτά και είστε σίγουροι ότι ο κλάδος `main` αποδίδει όπως απέδιδε και ο κλάδος `master`, μπορείτε να διαγράψετε τον κλάδο `master`:

[source, console]
----
$ git push origin --delete master
----
