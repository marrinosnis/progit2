[[r_getting_a_repo]]
=== Απόκτηση αποθετηρίου Git

Μπορούμε να δημιουργήσουμε ένα έργο στο Git χρησιμοποιώντας δύο βασικές προσεγγίσεις.

1. Να πάρουμε ένα έργο που έχουμε σε κάποιο υπάρχοντα κατάλογο που δεν βρίσκεται υπό έλεγχο εκδόσεων και να τον μετατρέψουμε σε ένα αποθετήριο Git
2. Να _κλωνοποιήσουμε_ (clone) ένα υπάρχον αποθετήριο Git από κάπου αλλού.

Σε κάθε περίπτωση, θα αποκτήσουμε ένα αποθετήριο Git τοπικά στον υπολογιστή σας.

==== Αρχικοποίηση αποθετηρίου σε έναν υπάρχοντα κατάλογο

Αν έχουμε ένα έργο σε έναν κατάλογο που δεν βρίσκεται υπό έλεγχο εκδόσεων και θέλουμε να ξεκινήσουμε να τον ελέγχουμε με το Git, πρώτα πρέπει να πάμε σε αυτό τον κατάλογο. 
Αυτό γίνεται με διαφορετικό τρόπο ανάλογα με το σύστημά σας.

Σε Linux
[source,console]
----
$ cd /home/user/my_project
----
Σε macOS:
[source,console]
----
$ cd /Users/user/my_project
----
Σε Windows:
[source,console]
----
$ cd C:/Users/user/my_project
----

και πληκτρολογούμε:

[source,console]
----
$ git init
----

Η εντολή αυτή δημιουργεί έναν νέο υποκατάλογο με το όνομα `.git` ο οποίος περιέχει όλα τα απαραίτητα αρχεία για το αποθετήριο -- ένα σκελετό για το αποθετήριό μας.
Στο σημείο αυτό, τίποτα δεν παρακολουθείται ακόμα από το έργο μας.
Βλ. <<ch10-git-internals#ch10-git-internals>> για περισσότερες πληροφορίες σχετικά με το τι ακριβώς αρχεία περιέχονται στον κατάλογο `.git`, που μόλις δημιουργήσαμε.(((εντολές git, init)))

Αν θέλουμε να ξεκινήσουμε τον έλεγχο έκδοσης στα υπάρχοντα αρχεία (εν εντιθέσει με ένα κενό κατάλογο), θα πρέπει να ξεκινήσουμε την παρακολούθηση αυτών των αρχείων και να κάνουμε την πρώτη υποβολή (commit).
Για να το πετύχουμε αυτό θα χρειαστούμε μερικές εντολές `git add` οι οποίες προσδιορίζουν τα αρχεία που θέλουμε να παρακολουθούμε και μια εντολή `git commit`:

[source,console]
----
$ git add *.c
$ git add LICENSE
$ git commit -m 'Initial project version'
----

Θα εξετάσουμε σε λίγο τι κάνουν οι παραπάνω εντολές.
Στο σημείο αυτό, έχουμε ένα αποθετήριο Git με κάποια παρακολουθούμενα αρχεία και μια αρχική υποβολή.

[[r_git_cloning]]
==== Κλωνοποίηση υπάρχοντος αποθετηρίου

Αν θέλουμε να αποκτήσουμε ένα αντίγραφο ενός υπάρχοντος αποθετηρίου Git -- για παράδειγμα, ένα έργο στο οποίο θα θέλουμε να συνεισφέρουμε -- η εντολή που χρειαζόμαστε είναι `git clone`.
Αν είμαστε εξεικοιωμένοι με άλλα συστήματα ελέγχου έκδοσης όπως το Subversion, θα παρατηρήσουμε ότι η εντολή είναι "clone" και όχι "checkout".
Αυτή είναι μια σημαντική διάκριση -- το Git δεν παίρνει απλά ένα αντίγραφο της τρέχουσας κατάστασης του αποθετηρίου, αλλά ένα πλήρες αντίγραφο σχεδόν όλων των δεδομένων που βρίσκονται στον διακομιστή.
Με την εντολή `git clone` όλες οι εκδόσεις κάθε αρχείου του έργου αποθηκεύονται τοπικά.
Μάλιστα, αν ο δίσκος του διακομιστή μας αλλοιωθεί, μπορούμε να χρησιμοποιήσουμε οποιονδήποτε από τους κλώνους του ώστε να θέσουμε τον διακομιστή στην κατάσταση που ήταν όταν κλωνοποιήθηκε (μπορεί να χαθεί κάποιο άγκιστρο (hook) από την μεριά του διακομιστή, αλλά τα δεδομένα με έκδοση θα είναι εκεί -- βλ. <<ch04-git-on-the-server#r_getting_git_on_a_server>> για περισσότερες πληροφορίες).

Για να κλωνοποιήσουμε ένα αποθετήριο, εκτελούμε την εντολή `git clone <url>`.(((εντολές git, clone)))
Για παράδειγμα, αν θέλουμε να κλωνοποιήσουμε τη βιβλιοθήκη libgit2 του Git, θα πρέπει να εκτελέσουμε:

[source,console]
----
$ git clone https://github.com/libgit2/libgit2
----

Η εντολή αυτή δημιουργεί έναν κατάλογο με το όνομα "`libgit2`", αρχικοποιεί έναν κατάλογο `.git` μέσα σε αυτό, κατεβάζει όλα τα δεδομένα αυτού του αποθετηρίου καθώς και ένα αντίγραφο από την τελευταία έκδοση.
Αν περιηγηθούμε στον καινούριο κατάλογο `libgit2`, θα δούμε τα αρχεία του έργου μέσα σε αυτό, έτοιμα προς χρήση ή επεξεργασία.

Αν θέλουμε να κλωνοποιήσουμε το αποθετήριο σε έναν κατάλογο με διαφορετικό όνομα, μπορούμε να το ορίσουμε με την παρακάτω εναλλακτική της εντολής:

[source,console]
----
$ git clone https://github.com/libgit2/libgit2 mylibgit
----

Η εντολή αυτή έχει το ίδιο αποτέλεσμα με την προηγούμενη, με τη διαφορά ότι ο κατάλογος που θα δημιουργηθεί θα ονομάζεται `mylibgit`.

Το Git συνεργάζεται με διάφορα πρωτόκολλα μεταφοράς που μπορούμε να χρησιμοποιήσουμε.
Το προηγούμενο παράδειγμα χρησιμοποεί το πρωτόκολλο `https://`, ενδέχεται επίσης να δούμε το `git://` ή το `user@server:path/to/repo.git` το οποίο χρησιμοποιεί το πρωτόκολλο μεταφοράς SSH.
Το κεφάλαιο <<ch04-git-on-the-server#r_getting_git_on_a_server>> παρουσιάζει όλες τις διαθέσιμες εναλλακτικές που με τις οποίες μπορεί ένας διακομιστής να μας δώσει πρόσβαση σε ένα αποθετήριο Git, καθώς και τα πλεονεκτήματα και μειονεκτήματα της κάθε εναλλακτικής.
